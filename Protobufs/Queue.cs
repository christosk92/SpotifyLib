// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: queue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spotify.Player.Proto.Transfer {

  /// <summary>Holder for reflection information generated from queue.proto</summary>
  public static partial class QueueReflection {

    #region Descriptor
    /// <summary>File descriptor for queue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtxdWV1ZS5wcm90bxIdc3BvdGlmeS5wbGF5ZXIucHJvdG8udHJhbnNmZXIa",
            "E2NvbnRleHRfdHJhY2sucHJvdG8iVQoFUXVldWUSMgoGdHJhY2tzGAEgAygL",
            "MiIuc3BvdGlmeS5wbGF5ZXIucHJvdG8uQ29udGV4dFRyYWNrEhgKEGlzX3Bs",
            "YXlpbmdfcXVldWUYAiABKAhCGAoUY29tLnNwb3RpZnkudHJhbnNmZXJIAg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spotify.Player.Proto.ContextTrackReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spotify.Player.Proto.Transfer.Queue), global::Spotify.Player.Proto.Transfer.Queue.Parser, new[]{ "Tracks", "IsPlayingQueue" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Queue : pb::IMessage<Queue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Queue> _parser = new pb::MessageParser<Queue>(() => new Queue());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Queue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spotify.Player.Proto.Transfer.QueueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue(Queue other) : this() {
      _hasBits0 = other._hasBits0;
      tracks_ = other.tracks_.Clone();
      isPlayingQueue_ = other.isPlayingQueue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Queue Clone() {
      return new Queue(this);
    }

    /// <summary>Field number for the "tracks" field.</summary>
    public const int TracksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Spotify.Player.Proto.ContextTrack> _repeated_tracks_codec
        = pb::FieldCodec.ForMessage(10, global::Spotify.Player.Proto.ContextTrack.Parser);
    private readonly pbc::RepeatedField<global::Spotify.Player.Proto.ContextTrack> tracks_ = new pbc::RepeatedField<global::Spotify.Player.Proto.ContextTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Spotify.Player.Proto.ContextTrack> Tracks {
      get { return tracks_; }
    }

    /// <summary>Field number for the "is_playing_queue" field.</summary>
    public const int IsPlayingQueueFieldNumber = 2;
    private readonly static bool IsPlayingQueueDefaultValue = false;

    private bool isPlayingQueue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayingQueue {
      get { if ((_hasBits0 & 1) != 0) { return isPlayingQueue_; } else { return IsPlayingQueueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPlayingQueue_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing_queue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPlayingQueue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_playing_queue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPlayingQueue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Queue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Queue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tracks_.Equals(other.tracks_)) return false;
      if (IsPlayingQueue != other.IsPlayingQueue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tracks_.GetHashCode();
      if (HasIsPlayingQueue) hash ^= IsPlayingQueue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tracks_.WriteTo(output, _repeated_tracks_codec);
      if (HasIsPlayingQueue) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlayingQueue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tracks_.WriteTo(ref output, _repeated_tracks_codec);
      if (HasIsPlayingQueue) {
        output.WriteRawTag(16);
        output.WriteBool(IsPlayingQueue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tracks_.CalculateSize(_repeated_tracks_codec);
      if (HasIsPlayingQueue) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Queue other) {
      if (other == null) {
        return;
      }
      tracks_.Add(other.tracks_);
      if (other.HasIsPlayingQueue) {
        IsPlayingQueue = other.IsPlayingQueue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tracks_.AddEntriesFrom(input, _repeated_tracks_codec);
            break;
          }
          case 16: {
            IsPlayingQueue = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tracks_.AddEntriesFrom(ref input, _repeated_tracks_codec);
            break;
          }
          case 16: {
            IsPlayingQueue = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
