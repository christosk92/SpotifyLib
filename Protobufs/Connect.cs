// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: connect.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Connectstate {

  /// <summary>Holder for reflection information generated from connect.proto</summary>
  public static partial class ConnectReflection {

    #region Descriptor
    /// <summary>File descriptor for connect.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConnectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jb25uZWN0LnByb3RvEgxjb25uZWN0c3RhdGUaDHBsYXllci5wcm90byKf",
            "AQoNQ2x1c3RlclVwZGF0ZRImCgdjbHVzdGVyGAEgASgLMhUuY29ubmVjdHN0",
            "YXRlLkNsdXN0ZXISOAoNdXBkYXRlX3JlYXNvbhgCIAEoDjIhLmNvbm5lY3Rz",
            "dGF0ZS5DbHVzdGVyVXBkYXRlUmVhc29uEg4KBmFja19pZBgDIAEoCRIcChRk",
            "ZXZpY2VzX3RoYXRfY2hhbmdlZBgEIAMoCSKmAQoGRGV2aWNlEi0KC2Rldmlj",
            "ZV9pbmZvGAEgASgLMhguY29ubmVjdHN0YXRlLkRldmljZUluZm8SLwoMcGxh",
            "eWVyX3N0YXRlGAIgASgLMhkuY29ubmVjdHN0YXRlLlBsYXllclN0YXRlEjwK",
            "E3ByaXZhdGVfZGV2aWNlX2luZm8YAyABKAsyHy5jb25uZWN0c3RhdGUuUHJp",
            "dmF0ZURldmljZUluZm8i+gEKB0NsdXN0ZXISEQoJdGltZXN0YW1wGAEgASgD",
            "EhgKEGFjdGl2ZV9kZXZpY2VfaWQYAiABKAkSLwoMcGxheWVyX3N0YXRlGAMg",
            "ASgLMhkuY29ubmVjdHN0YXRlLlBsYXllclN0YXRlEjEKBmRldmljZRgEIAMo",
            "CzIhLmNvbm5lY3RzdGF0ZS5DbHVzdGVyLkRldmljZUVudHJ5EhUKDXRyYW5z",
            "ZmVyX2RhdGEYBSABKAwaRwoLRGV2aWNlRW50cnkSCwoDa2V5GAEgASgJEicK",
            "BXZhbHVlGAIgASgLMhguY29ubmVjdHN0YXRlLkRldmljZUluZm86AjgBIqED",
            "Cg9QdXRTdGF0ZVJlcXVlc3QSFAoMY2FsbGJhY2tfdXJsGAEgASgJEiQKBmRl",
            "dmljZRgCIAEoCzIULmNvbm5lY3RzdGF0ZS5EZXZpY2USLQoLbWVtYmVyX3R5",
            "cGUYAyABKA4yGC5jb25uZWN0c3RhdGUuTWVtYmVyVHlwZRIRCglpc19hY3Rp",
            "dmUYBCABKAgSNgoQcHV0X3N0YXRlX3JlYXNvbhgFIAEoDjIcLmNvbm5lY3Rz",
            "dGF0ZS5QdXRTdGF0ZVJlYXNvbhISCgptZXNzYWdlX2lkGAYgASgNEiYKHmxh",
            "c3RfY29tbWFuZF9zZW50X2J5X2RldmljZV9pZBgHIAEoCRIfChdsYXN0X2Nv",
            "bW1hbmRfbWVzc2FnZV9pZBgIIAEoDRIaChJzdGFydGVkX3BsYXlpbmdfYXQY",
            "CSABKAQSHwoXaGFzX2JlZW5fcGxheWluZ19mb3JfbXMYCyABKAQSHQoVY2xp",
            "ZW50X3NpZGVfdGltZXN0YW1wGAwgASgEEh8KF29ubHlfd3JpdGVfcGxheWVy",
            "X3N0YXRlGA0gASgIIiUKEVByaXZhdGVEZXZpY2VJbmZvEhAKCHBsYXRmb3Jt",
            "GAEgASgJIigKEFN1YnNjcmliZVJlcXVlc3QSFAoMY2FsbGJhY2tfdXJsGAEg",
            "ASgJIsUDCgpEZXZpY2VJbmZvEhAKCGNhbl9wbGF5GAEgASgIEg4KBnZvbHVt",
            "ZRgCIAEoDRIMCgRuYW1lGAMgASgJEjAKDGNhcGFiaWxpdGllcxgEIAEoCzIa",
            "LmNvbm5lY3RzdGF0ZS5DYXBhYmlsaXRpZXMSHwoXZGV2aWNlX3NvZnR3YXJl",
            "X3ZlcnNpb24YBiABKAkSLQoLZGV2aWNlX3R5cGUYByABKA4yGC5jb25uZWN0",
            "c3RhdGUuRGV2aWNlVHlwZRIVCg1zcGlyY192ZXJzaW9uGAkgASgJEhEKCWRl",
            "dmljZV9pZBgKIAEoCRIaChJpc19wcml2YXRlX3Nlc3Npb24YCyABKAgSGQoR",
            "aXNfc29jaWFsX2Nvbm5lY3QYDCABKAgSEQoJY2xpZW50X2lkGA0gASgJEg0K",
            "BWJyYW5kGA4gASgJEg0KBW1vZGVsGA8gASgJEj8KDG1ldGFkYXRhX21hcBgQ",
            "IAMoCzIpLmNvbm5lY3RzdGF0ZS5EZXZpY2VJbmZvLk1ldGFkYXRhTWFwRW50",
            "cnkaMgoQTWV0YWRhdGFNYXBFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIswECgxDYXBhYmlsaXRpZXMSFQoNY2FuX2JlX3BsYXllchgC",
            "IAEoCBIZChFyZXN0cmljdF90b19sb2NhbBgDIAEoCBIaChJnYWlhX2VxX2Nv",
            "bm5lY3RfaWQYBSABKAgSFwoPc3VwcG9ydHNfbG9nb3V0GAYgASgIEhUKDWlz",
            "X29ic2VydmFibGUYByABKAgSFAoMdm9sdW1lX3N0ZXBzGAggASgFEhcKD3N1",
            "cHBvcnRlZF90eXBlcxgJIAMoCRIUCgxjb21tYW5kX2Fja3MYCiABKAgSFwoP",
            "c3VwcG9ydHNfcmVuYW1lGAsgASgIEg4KBmhpZGRlbhgMIAEoCBIWCg5kaXNh",
            "YmxlX3ZvbHVtZRgNIAEoCBIYChBjb25uZWN0X2Rpc2FibGVkGA4gASgIEhwK",
            "FHN1cHBvcnRzX3BsYXlsaXN0X3YyGA8gASgIEhcKD2lzX2NvbnRyb2xsYWJs",
            "ZRgQIAEoCBIiChpzdXBwb3J0c19leHRlcm5hbF9lcGlzb2RlcxgRIAEoCBIl",
            "Ch1zdXBwb3J0c19zZXRfYmFja2VuZF9tZXRhZGF0YRgSIAEoCBIhChlzdXBw",
            "b3J0c190cmFuc2Zlcl9jb21tYW5kGBMgASgIEiAKGHN1cHBvcnRzX2NvbW1h",
            "bmRfcmVxdWVzdBgUIAEoCBIYChBpc192b2ljZV9lbmFibGVkGBUgASgIEh8K",
            "F25lZWRzX2Z1bGxfcGxheWVyX3N0YXRlGBYgASgIEhwKFHN1cHBvcnRzX2d6",
            "aXBfcHVzaGVzGBcgASgIIisKFUNvbm5lY3RDb21tYW5kT3B0aW9ucxISCgpt",
            "ZXNzYWdlX2lkGAEgASgFIk0KDUxvZ291dENvbW1hbmQSPAoPY29tbWFuZF9v",
            "cHRpb25zGAEgASgLMiMuY29ubmVjdHN0YXRlLkNvbm5lY3RDb21tYW5kT3B0",
            "aW9ucyJgChBTZXRWb2x1bWVDb21tYW5kEg4KBnZvbHVtZRgBIAEoBRI8Cg9j",
            "b21tYW5kX29wdGlvbnMYAiABKAsyIy5jb25uZWN0c3RhdGUuQ29ubmVjdENv",
            "bW1hbmRPcHRpb25zImAKDVJlbmFtZUNvbW1hbmQSEQoJcmVuYW1lX3RvGAEg",
            "ASgJEjwKD2NvbW1hbmRfb3B0aW9ucxgCIAEoCzIjLmNvbm5lY3RzdGF0ZS5D",
            "b25uZWN0Q29tbWFuZE9wdGlvbnMilQEKGVNldEJhY2tlbmRNZXRhZGF0YUNv",
            "bW1hbmQSRwoIbWV0YWRhdGEYASADKAsyNS5jb25uZWN0c3RhdGUuU2V0QmFj",
            "a2VuZE1ldGFkYXRhQ29tbWFuZC5NZXRhZGF0YUVudHJ5Gi8KDU1ldGFkYXRh",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASrUAQoRU2Vu",
            "ZENvbW1hbmRSZXN1bHQSHwobVU5LTk9XTl9TRU5EX0NPTU1BTkRfUkVTVUxU",
            "EAASCwoHU1VDQ0VTUxABEhQKEERFVklDRV9OT1RfRk9VTkQQAhIYChRDT05U",
            "RVhUX1BMQVlFUl9FUlJPUhADEhYKEkRFVklDRV9ESVNBUFBFQVJFRBAEEhIK",
            "DlVQU1RSRUFNX0VSUk9SEAUSIwofREVWSUNFX0RPRVNfTk9UX1NVUFBPUlRf",
            "Q09NTUFORBAGEhAKDFJBVEVfTElNSVRFRBAHKrcBCg5QdXRTdGF0ZVJlYXNv",
            "bhIcChhVTktOT1dOX1BVVF9TVEFURV9SRUFTT04QABIPCgtTUElSQ19IRUxM",
            "TxABEhAKDFNQSVJDX05PVElGWRACEg4KCk5FV19ERVZJQ0UQAxIYChRQTEFZ",
            "RVJfU1RBVEVfQ0hBTkdFRBAEEhIKDlZPTFVNRV9DSEFOR0VEEAUSEQoNUElD",
            "S0VSX09QRU5FRBAGEhMKD0JFQ0FNRV9JTkFDVElWRRAHKjsKCk1lbWJlclR5",
            "cGUSDAoIU1BJUkNfVjIQABIMCghTUElSQ19WMxABEhEKDUNPTk5FQ1RfU1RB",
            "VEUQAiqEAQoTQ2x1c3RlclVwZGF0ZVJlYXNvbhIhCh1VTktOT1dOX0NMVVNU",
            "RVJfVVBEQVRFX1JFQVNPThAAEhcKE0RFVklDRVNfRElTQVBQRUFSRUQQARIY",
            "ChRERVZJQ0VfU1RBVEVfQ0hBTkdFRBACEhcKE05FV19ERVZJQ0VfQVBQRUFS",
            "RUQQAyqgAgoKRGV2aWNlVHlwZRILCgdVTktOT1dOEAASDAoIQ09NUFVURVIQ",
            "ARIKCgZUQUJMRVQQAhIOCgpTTUFSVFBIT05FEAMSCwoHU1BFQUtFUhAEEgYK",
            "AlRWEAUSBwoDQVZSEAYSBwoDU1RCEAcSEAoMQVVESU9fRE9OR0xFEAgSEAoM",
            "R0FNRV9DT05TT0xFEAkSDgoKQ0FTVF9WSURFTxAKEg4KCkNBU1RfQVVESU8Q",
            "CxIOCgpBVVRPTU9CSUxFEAwSDgoKU01BUlRXQVRDSBANEg4KCkNIUk9NRUJP",
            "T0sQDhITCg9VTktOT1dOX1NQT1RJRlkQZBINCglDQVJfVEhJTkcQZRIMCghP",
            "QlNFUlZFUhBmEg4KCkhPTUVfVEhJTkcQZ0IcChhjb20uc3BvdGlmeS5jb25u",
            "ZWN0c3RhdGVIAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Connectstate.PlayerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Connectstate.SendCommandResult), typeof(global::Connectstate.PutStateReason), typeof(global::Connectstate.MemberType), typeof(global::Connectstate.ClusterUpdateReason), typeof(global::Connectstate.DeviceType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.ClusterUpdate), global::Connectstate.ClusterUpdate.Parser, new[]{ "Cluster", "UpdateReason", "AckId", "DevicesThatChanged" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.Device), global::Connectstate.Device.Parser, new[]{ "DeviceInfo", "PlayerState", "PrivateDeviceInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.Cluster), global::Connectstate.Cluster.Parser, new[]{ "Timestamp", "ActiveDeviceId", "PlayerState", "Device", "TransferData" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.PutStateRequest), global::Connectstate.PutStateRequest.Parser, new[]{ "CallbackUrl", "Device", "MemberType", "IsActive", "PutStateReason", "MessageId", "LastCommandSentByDeviceId", "LastCommandMessageId", "StartedPlayingAt", "HasBeenPlayingForMs", "ClientSideTimestamp", "OnlyWritePlayerState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.PrivateDeviceInfo), global::Connectstate.PrivateDeviceInfo.Parser, new[]{ "Platform" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.SubscribeRequest), global::Connectstate.SubscribeRequest.Parser, new[]{ "CallbackUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.DeviceInfo), global::Connectstate.DeviceInfo.Parser, new[]{ "CanPlay", "Volume", "Name", "Capabilities", "DeviceSoftwareVersion", "DeviceType", "SpircVersion", "DeviceId", "IsPrivateSession", "IsSocialConnect", "ClientId", "Brand", "Model", "MetadataMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.Capabilities), global::Connectstate.Capabilities.Parser, new[]{ "CanBePlayer", "RestrictToLocal", "GaiaEqConnectId", "SupportsLogout", "IsObservable", "VolumeSteps", "SupportedTypes", "CommandAcks", "SupportsRename", "Hidden", "DisableVolume", "ConnectDisabled", "SupportsPlaylistV2", "IsControllable", "SupportsExternalEpisodes", "SupportsSetBackendMetadata", "SupportsTransferCommand", "SupportsCommandRequest", "IsVoiceEnabled", "NeedsFullPlayerState", "SupportsGzipPushes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.ConnectCommandOptions), global::Connectstate.ConnectCommandOptions.Parser, new[]{ "MessageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.LogoutCommand), global::Connectstate.LogoutCommand.Parser, new[]{ "CommandOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.SetVolumeCommand), global::Connectstate.SetVolumeCommand.Parser, new[]{ "Volume", "CommandOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.RenameCommand), global::Connectstate.RenameCommand.Parser, new[]{ "RenameTo", "CommandOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.SetBackendMetadataCommand), global::Connectstate.SetBackendMetadataCommand.Parser, new[]{ "Metadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum SendCommandResult {
    [pbr::OriginalName("UNKNOWN_SEND_COMMAND_RESULT")] UnknownSendCommandResult = 0,
    [pbr::OriginalName("SUCCESS")] Success = 1,
    [pbr::OriginalName("DEVICE_NOT_FOUND")] DeviceNotFound = 2,
    [pbr::OriginalName("CONTEXT_PLAYER_ERROR")] ContextPlayerError = 3,
    [pbr::OriginalName("DEVICE_DISAPPEARED")] DeviceDisappeared = 4,
    [pbr::OriginalName("UPSTREAM_ERROR")] UpstreamError = 5,
    [pbr::OriginalName("DEVICE_DOES_NOT_SUPPORT_COMMAND")] DeviceDoesNotSupportCommand = 6,
    [pbr::OriginalName("RATE_LIMITED")] RateLimited = 7,
  }

  public enum PutStateReason {
    [pbr::OriginalName("UNKNOWN_PUT_STATE_REASON")] UnknownPutStateReason = 0,
    [pbr::OriginalName("SPIRC_HELLO")] SpircHello = 1,
    [pbr::OriginalName("SPIRC_NOTIFY")] SpircNotify = 2,
    [pbr::OriginalName("NEW_DEVICE")] NewDevice = 3,
    [pbr::OriginalName("PLAYER_STATE_CHANGED")] PlayerStateChanged = 4,
    [pbr::OriginalName("VOLUME_CHANGED")] VolumeChanged = 5,
    [pbr::OriginalName("PICKER_OPENED")] PickerOpened = 6,
    [pbr::OriginalName("BECAME_INACTIVE")] BecameInactive = 7,
  }

  public enum MemberType {
    [pbr::OriginalName("SPIRC_V2")] SpircV2 = 0,
    [pbr::OriginalName("SPIRC_V3")] SpircV3 = 1,
    [pbr::OriginalName("CONNECT_STATE")] ConnectState = 2,
  }

  public enum ClusterUpdateReason {
    [pbr::OriginalName("UNKNOWN_CLUSTER_UPDATE_REASON")] UnknownClusterUpdateReason = 0,
    [pbr::OriginalName("DEVICES_DISAPPEARED")] DevicesDisappeared = 1,
    [pbr::OriginalName("DEVICE_STATE_CHANGED")] DeviceStateChanged = 2,
    [pbr::OriginalName("NEW_DEVICE_APPEARED")] NewDeviceAppeared = 3,
  }

  public enum DeviceType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("COMPUTER")] Computer = 1,
    [pbr::OriginalName("TABLET")] Tablet = 2,
    [pbr::OriginalName("SMARTPHONE")] Smartphone = 3,
    [pbr::OriginalName("SPEAKER")] Speaker = 4,
    [pbr::OriginalName("TV")] Tv = 5,
    [pbr::OriginalName("AVR")] Avr = 6,
    [pbr::OriginalName("STB")] Stb = 7,
    [pbr::OriginalName("AUDIO_DONGLE")] AudioDongle = 8,
    [pbr::OriginalName("GAME_CONSOLE")] GameConsole = 9,
    [pbr::OriginalName("CAST_VIDEO")] CastVideo = 10,
    [pbr::OriginalName("CAST_AUDIO")] CastAudio = 11,
    [pbr::OriginalName("AUTOMOBILE")] Automobile = 12,
    [pbr::OriginalName("SMARTWATCH")] Smartwatch = 13,
    [pbr::OriginalName("CHROMEBOOK")] Chromebook = 14,
    [pbr::OriginalName("UNKNOWN_SPOTIFY")] UnknownSpotify = 100,
    [pbr::OriginalName("CAR_THING")] CarThing = 101,
    [pbr::OriginalName("OBSERVER")] Observer = 102,
    [pbr::OriginalName("HOME_THING")] HomeThing = 103,
  }

  #endregion

  #region Messages
  public sealed partial class ClusterUpdate : pb::IMessage<ClusterUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClusterUpdate> _parser = new pb::MessageParser<ClusterUpdate>(() => new ClusterUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterUpdate(ClusterUpdate other) : this() {
      cluster_ = other.cluster_ != null ? other.cluster_.Clone() : null;
      updateReason_ = other.updateReason_;
      ackId_ = other.ackId_;
      devicesThatChanged_ = other.devicesThatChanged_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterUpdate Clone() {
      return new ClusterUpdate(this);
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 1;
    private global::Connectstate.Cluster cluster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Cluster Cluster {
      get { return cluster_; }
      set {
        cluster_ = value;
      }
    }

    /// <summary>Field number for the "update_reason" field.</summary>
    public const int UpdateReasonFieldNumber = 2;
    private global::Connectstate.ClusterUpdateReason updateReason_ = global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ClusterUpdateReason UpdateReason {
      get { return updateReason_; }
      set {
        updateReason_ = value;
      }
    }

    /// <summary>Field number for the "ack_id" field.</summary>
    public const int AckIdFieldNumber = 3;
    private string ackId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AckId {
      get { return ackId_; }
      set {
        ackId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devices_that_changed" field.</summary>
    public const int DevicesThatChangedFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_devicesThatChanged_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> devicesThatChanged_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DevicesThatChanged {
      get { return devicesThatChanged_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cluster, other.Cluster)) return false;
      if (UpdateReason != other.UpdateReason) return false;
      if (AckId != other.AckId) return false;
      if(!devicesThatChanged_.Equals(other.devicesThatChanged_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cluster_ != null) hash ^= Cluster.GetHashCode();
      if (UpdateReason != global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason) hash ^= UpdateReason.GetHashCode();
      if (AckId.Length != 0) hash ^= AckId.GetHashCode();
      hash ^= devicesThatChanged_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cluster_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cluster);
      }
      if (UpdateReason != global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UpdateReason);
      }
      if (AckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AckId);
      }
      devicesThatChanged_.WriteTo(output, _repeated_devicesThatChanged_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cluster_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cluster);
      }
      if (UpdateReason != global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UpdateReason);
      }
      if (AckId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AckId);
      }
      devicesThatChanged_.WriteTo(ref output, _repeated_devicesThatChanged_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cluster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cluster);
      }
      if (UpdateReason != global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateReason);
      }
      if (AckId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AckId);
      }
      size += devicesThatChanged_.CalculateSize(_repeated_devicesThatChanged_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterUpdate other) {
      if (other == null) {
        return;
      }
      if (other.cluster_ != null) {
        if (cluster_ == null) {
          Cluster = new global::Connectstate.Cluster();
        }
        Cluster.MergeFrom(other.Cluster);
      }
      if (other.UpdateReason != global::Connectstate.ClusterUpdateReason.UnknownClusterUpdateReason) {
        UpdateReason = other.UpdateReason;
      }
      if (other.AckId.Length != 0) {
        AckId = other.AckId;
      }
      devicesThatChanged_.Add(other.devicesThatChanged_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cluster_ == null) {
              Cluster = new global::Connectstate.Cluster();
            }
            input.ReadMessage(Cluster);
            break;
          }
          case 16: {
            UpdateReason = (global::Connectstate.ClusterUpdateReason) input.ReadEnum();
            break;
          }
          case 26: {
            AckId = input.ReadString();
            break;
          }
          case 34: {
            devicesThatChanged_.AddEntriesFrom(input, _repeated_devicesThatChanged_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cluster_ == null) {
              Cluster = new global::Connectstate.Cluster();
            }
            input.ReadMessage(Cluster);
            break;
          }
          case 16: {
            UpdateReason = (global::Connectstate.ClusterUpdateReason) input.ReadEnum();
            break;
          }
          case 26: {
            AckId = input.ReadString();
            break;
          }
          case 34: {
            devicesThatChanged_.AddEntriesFrom(ref input, _repeated_devicesThatChanged_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Device : pb::IMessage<Device>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Device> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device(Device other) : this() {
      deviceInfo_ = other.deviceInfo_ != null ? other.deviceInfo_.Clone() : null;
      playerState_ = other.playerState_ != null ? other.playerState_.Clone() : null;
      privateDeviceInfo_ = other.privateDeviceInfo_ != null ? other.privateDeviceInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device Clone() {
      return new Device(this);
    }

    /// <summary>Field number for the "device_info" field.</summary>
    public const int DeviceInfoFieldNumber = 1;
    private global::Connectstate.DeviceInfo deviceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.DeviceInfo DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 2;
    private global::Connectstate.PlayerState playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.PlayerState PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "private_device_info" field.</summary>
    public const int PrivateDeviceInfoFieldNumber = 3;
    private global::Connectstate.PrivateDeviceInfo privateDeviceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.PrivateDeviceInfo PrivateDeviceInfo {
      get { return privateDeviceInfo_; }
      set {
        privateDeviceInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Device);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Device other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
      if (!object.Equals(PlayerState, other.PlayerState)) return false;
      if (!object.Equals(PrivateDeviceInfo, other.PrivateDeviceInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
      if (playerState_ != null) hash ^= PlayerState.GetHashCode();
      if (privateDeviceInfo_ != null) hash ^= PrivateDeviceInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (deviceInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceInfo);
      }
      if (playerState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerState);
      }
      if (privateDeviceInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrivateDeviceInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (deviceInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceInfo);
      }
      if (playerState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerState);
      }
      if (privateDeviceInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrivateDeviceInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
      }
      if (playerState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerState);
      }
      if (privateDeviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateDeviceInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Device other) {
      if (other == null) {
        return;
      }
      if (other.deviceInfo_ != null) {
        if (deviceInfo_ == null) {
          DeviceInfo = new global::Connectstate.DeviceInfo();
        }
        DeviceInfo.MergeFrom(other.DeviceInfo);
      }
      if (other.playerState_ != null) {
        if (playerState_ == null) {
          PlayerState = new global::Connectstate.PlayerState();
        }
        PlayerState.MergeFrom(other.PlayerState);
      }
      if (other.privateDeviceInfo_ != null) {
        if (privateDeviceInfo_ == null) {
          PrivateDeviceInfo = new global::Connectstate.PrivateDeviceInfo();
        }
        PrivateDeviceInfo.MergeFrom(other.PrivateDeviceInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deviceInfo_ == null) {
              DeviceInfo = new global::Connectstate.DeviceInfo();
            }
            input.ReadMessage(DeviceInfo);
            break;
          }
          case 18: {
            if (playerState_ == null) {
              PlayerState = new global::Connectstate.PlayerState();
            }
            input.ReadMessage(PlayerState);
            break;
          }
          case 26: {
            if (privateDeviceInfo_ == null) {
              PrivateDeviceInfo = new global::Connectstate.PrivateDeviceInfo();
            }
            input.ReadMessage(PrivateDeviceInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (deviceInfo_ == null) {
              DeviceInfo = new global::Connectstate.DeviceInfo();
            }
            input.ReadMessage(DeviceInfo);
            break;
          }
          case 18: {
            if (playerState_ == null) {
              PlayerState = new global::Connectstate.PlayerState();
            }
            input.ReadMessage(PlayerState);
            break;
          }
          case 26: {
            if (privateDeviceInfo_ == null) {
              PrivateDeviceInfo = new global::Connectstate.PrivateDeviceInfo();
            }
            input.ReadMessage(PrivateDeviceInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Cluster : pb::IMessage<Cluster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      timestamp_ = other.timestamp_;
      activeDeviceId_ = other.activeDeviceId_;
      playerState_ = other.playerState_ != null ? other.playerState_.Clone() : null;
      device_ = other.device_.Clone();
      transferData_ = other.transferData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "active_device_id" field.</summary>
    public const int ActiveDeviceIdFieldNumber = 2;
    private string activeDeviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActiveDeviceId {
      get { return activeDeviceId_; }
      set {
        activeDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 3;
    private global::Connectstate.PlayerState playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.PlayerState PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Connectstate.DeviceInfo>.Codec _map_device_codec
        = new pbc::MapField<string, global::Connectstate.DeviceInfo>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Connectstate.DeviceInfo.Parser), 34);
    private readonly pbc::MapField<string, global::Connectstate.DeviceInfo> device_ = new pbc::MapField<string, global::Connectstate.DeviceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Connectstate.DeviceInfo> Device {
      get { return device_; }
    }

    /// <summary>Field number for the "transfer_data" field.</summary>
    public const int TransferDataFieldNumber = 5;
    private pb::ByteString transferData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransferData {
      get { return transferData_; }
      set {
        transferData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ActiveDeviceId != other.ActiveDeviceId) return false;
      if (!object.Equals(PlayerState, other.PlayerState)) return false;
      if (!Device.Equals(other.Device)) return false;
      if (TransferData != other.TransferData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (ActiveDeviceId.Length != 0) hash ^= ActiveDeviceId.GetHashCode();
      if (playerState_ != null) hash ^= PlayerState.GetHashCode();
      hash ^= Device.GetHashCode();
      if (TransferData.Length != 0) hash ^= TransferData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (ActiveDeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveDeviceId);
      }
      if (playerState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerState);
      }
      device_.WriteTo(output, _map_device_codec);
      if (TransferData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(TransferData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (ActiveDeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActiveDeviceId);
      }
      if (playerState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerState);
      }
      device_.WriteTo(ref output, _map_device_codec);
      if (TransferData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(TransferData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (ActiveDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActiveDeviceId);
      }
      if (playerState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerState);
      }
      size += device_.CalculateSize(_map_device_codec);
      if (TransferData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransferData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.ActiveDeviceId.Length != 0) {
        ActiveDeviceId = other.ActiveDeviceId;
      }
      if (other.playerState_ != null) {
        if (playerState_ == null) {
          PlayerState = new global::Connectstate.PlayerState();
        }
        PlayerState.MergeFrom(other.PlayerState);
      }
      device_.Add(other.device_);
      if (other.TransferData.Length != 0) {
        TransferData = other.TransferData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            ActiveDeviceId = input.ReadString();
            break;
          }
          case 26: {
            if (playerState_ == null) {
              PlayerState = new global::Connectstate.PlayerState();
            }
            input.ReadMessage(PlayerState);
            break;
          }
          case 34: {
            device_.AddEntriesFrom(input, _map_device_codec);
            break;
          }
          case 42: {
            TransferData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            ActiveDeviceId = input.ReadString();
            break;
          }
          case 26: {
            if (playerState_ == null) {
              PlayerState = new global::Connectstate.PlayerState();
            }
            input.ReadMessage(PlayerState);
            break;
          }
          case 34: {
            device_.AddEntriesFrom(ref input, _map_device_codec);
            break;
          }
          case 42: {
            TransferData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PutStateRequest : pb::IMessage<PutStateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PutStateRequest> _parser = new pb::MessageParser<PutStateRequest>(() => new PutStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutStateRequest(PutStateRequest other) : this() {
      callbackUrl_ = other.callbackUrl_;
      device_ = other.device_ != null ? other.device_.Clone() : null;
      memberType_ = other.memberType_;
      isActive_ = other.isActive_;
      putStateReason_ = other.putStateReason_;
      messageId_ = other.messageId_;
      lastCommandSentByDeviceId_ = other.lastCommandSentByDeviceId_;
      lastCommandMessageId_ = other.lastCommandMessageId_;
      startedPlayingAt_ = other.startedPlayingAt_;
      hasBeenPlayingForMs_ = other.hasBeenPlayingForMs_;
      clientSideTimestamp_ = other.clientSideTimestamp_;
      onlyWritePlayerState_ = other.onlyWritePlayerState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutStateRequest Clone() {
      return new PutStateRequest(this);
    }

    /// <summary>Field number for the "callback_url" field.</summary>
    public const int CallbackUrlFieldNumber = 1;
    private string callbackUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 2;
    private global::Connectstate.Device device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Device Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "member_type" field.</summary>
    public const int MemberTypeFieldNumber = 3;
    private global::Connectstate.MemberType memberType_ = global::Connectstate.MemberType.SpircV2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.MemberType MemberType {
      get { return memberType_; }
      set {
        memberType_ = value;
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 4;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "put_state_reason" field.</summary>
    public const int PutStateReasonFieldNumber = 5;
    private global::Connectstate.PutStateReason putStateReason_ = global::Connectstate.PutStateReason.UnknownPutStateReason;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.PutStateReason PutStateReason {
      get { return putStateReason_; }
      set {
        putStateReason_ = value;
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 6;
    private uint messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    /// <summary>Field number for the "last_command_sent_by_device_id" field.</summary>
    public const int LastCommandSentByDeviceIdFieldNumber = 7;
    private string lastCommandSentByDeviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastCommandSentByDeviceId {
      get { return lastCommandSentByDeviceId_; }
      set {
        lastCommandSentByDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_command_message_id" field.</summary>
    public const int LastCommandMessageIdFieldNumber = 8;
    private uint lastCommandMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastCommandMessageId {
      get { return lastCommandMessageId_; }
      set {
        lastCommandMessageId_ = value;
      }
    }

    /// <summary>Field number for the "started_playing_at" field.</summary>
    public const int StartedPlayingAtFieldNumber = 9;
    private ulong startedPlayingAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartedPlayingAt {
      get { return startedPlayingAt_; }
      set {
        startedPlayingAt_ = value;
      }
    }

    /// <summary>Field number for the "has_been_playing_for_ms" field.</summary>
    public const int HasBeenPlayingForMsFieldNumber = 11;
    private ulong hasBeenPlayingForMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HasBeenPlayingForMs {
      get { return hasBeenPlayingForMs_; }
      set {
        hasBeenPlayingForMs_ = value;
      }
    }

    /// <summary>Field number for the "client_side_timestamp" field.</summary>
    public const int ClientSideTimestampFieldNumber = 12;
    private ulong clientSideTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientSideTimestamp {
      get { return clientSideTimestamp_; }
      set {
        clientSideTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "only_write_player_state" field.</summary>
    public const int OnlyWritePlayerStateFieldNumber = 13;
    private bool onlyWritePlayerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyWritePlayerState {
      get { return onlyWritePlayerState_; }
      set {
        onlyWritePlayerState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackUrl != other.CallbackUrl) return false;
      if (!object.Equals(Device, other.Device)) return false;
      if (MemberType != other.MemberType) return false;
      if (IsActive != other.IsActive) return false;
      if (PutStateReason != other.PutStateReason) return false;
      if (MessageId != other.MessageId) return false;
      if (LastCommandSentByDeviceId != other.LastCommandSentByDeviceId) return false;
      if (LastCommandMessageId != other.LastCommandMessageId) return false;
      if (StartedPlayingAt != other.StartedPlayingAt) return false;
      if (HasBeenPlayingForMs != other.HasBeenPlayingForMs) return false;
      if (ClientSideTimestamp != other.ClientSideTimestamp) return false;
      if (OnlyWritePlayerState != other.OnlyWritePlayerState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (device_ != null) hash ^= Device.GetHashCode();
      if (MemberType != global::Connectstate.MemberType.SpircV2) hash ^= MemberType.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (PutStateReason != global::Connectstate.PutStateReason.UnknownPutStateReason) hash ^= PutStateReason.GetHashCode();
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (LastCommandSentByDeviceId.Length != 0) hash ^= LastCommandSentByDeviceId.GetHashCode();
      if (LastCommandMessageId != 0) hash ^= LastCommandMessageId.GetHashCode();
      if (StartedPlayingAt != 0UL) hash ^= StartedPlayingAt.GetHashCode();
      if (HasBeenPlayingForMs != 0UL) hash ^= HasBeenPlayingForMs.GetHashCode();
      if (ClientSideTimestamp != 0UL) hash ^= ClientSideTimestamp.GetHashCode();
      if (OnlyWritePlayerState != false) hash ^= OnlyWritePlayerState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallbackUrl);
      }
      if (device_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Device);
      }
      if (MemberType != global::Connectstate.MemberType.SpircV2) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MemberType);
      }
      if (IsActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsActive);
      }
      if (PutStateReason != global::Connectstate.PutStateReason.UnknownPutStateReason) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PutStateReason);
      }
      if (MessageId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MessageId);
      }
      if (LastCommandSentByDeviceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastCommandSentByDeviceId);
      }
      if (LastCommandMessageId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LastCommandMessageId);
      }
      if (StartedPlayingAt != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(StartedPlayingAt);
      }
      if (HasBeenPlayingForMs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(HasBeenPlayingForMs);
      }
      if (ClientSideTimestamp != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(ClientSideTimestamp);
      }
      if (OnlyWritePlayerState != false) {
        output.WriteRawTag(104);
        output.WriteBool(OnlyWritePlayerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallbackUrl);
      }
      if (device_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Device);
      }
      if (MemberType != global::Connectstate.MemberType.SpircV2) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MemberType);
      }
      if (IsActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsActive);
      }
      if (PutStateReason != global::Connectstate.PutStateReason.UnknownPutStateReason) {
        output.WriteRawTag(40);
        output.WriteEnum((int) PutStateReason);
      }
      if (MessageId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MessageId);
      }
      if (LastCommandSentByDeviceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LastCommandSentByDeviceId);
      }
      if (LastCommandMessageId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LastCommandMessageId);
      }
      if (StartedPlayingAt != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(StartedPlayingAt);
      }
      if (HasBeenPlayingForMs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(HasBeenPlayingForMs);
      }
      if (ClientSideTimestamp != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(ClientSideTimestamp);
      }
      if (OnlyWritePlayerState != false) {
        output.WriteRawTag(104);
        output.WriteBool(OnlyWritePlayerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (MemberType != global::Connectstate.MemberType.SpircV2) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MemberType);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (PutStateReason != global::Connectstate.PutStateReason.UnknownPutStateReason) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PutStateReason);
      }
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageId);
      }
      if (LastCommandSentByDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastCommandSentByDeviceId);
      }
      if (LastCommandMessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastCommandMessageId);
      }
      if (StartedPlayingAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartedPlayingAt);
      }
      if (HasBeenPlayingForMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HasBeenPlayingForMs);
      }
      if (ClientSideTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientSideTimestamp);
      }
      if (OnlyWritePlayerState != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutStateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Connectstate.Device();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.MemberType != global::Connectstate.MemberType.SpircV2) {
        MemberType = other.MemberType;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.PutStateReason != global::Connectstate.PutStateReason.UnknownPutStateReason) {
        PutStateReason = other.PutStateReason;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      if (other.LastCommandSentByDeviceId.Length != 0) {
        LastCommandSentByDeviceId = other.LastCommandSentByDeviceId;
      }
      if (other.LastCommandMessageId != 0) {
        LastCommandMessageId = other.LastCommandMessageId;
      }
      if (other.StartedPlayingAt != 0UL) {
        StartedPlayingAt = other.StartedPlayingAt;
      }
      if (other.HasBeenPlayingForMs != 0UL) {
        HasBeenPlayingForMs = other.HasBeenPlayingForMs;
      }
      if (other.ClientSideTimestamp != 0UL) {
        ClientSideTimestamp = other.ClientSideTimestamp;
      }
      if (other.OnlyWritePlayerState != false) {
        OnlyWritePlayerState = other.OnlyWritePlayerState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 18: {
            if (device_ == null) {
              Device = new global::Connectstate.Device();
            }
            input.ReadMessage(Device);
            break;
          }
          case 24: {
            MemberType = (global::Connectstate.MemberType) input.ReadEnum();
            break;
          }
          case 32: {
            IsActive = input.ReadBool();
            break;
          }
          case 40: {
            PutStateReason = (global::Connectstate.PutStateReason) input.ReadEnum();
            break;
          }
          case 48: {
            MessageId = input.ReadUInt32();
            break;
          }
          case 58: {
            LastCommandSentByDeviceId = input.ReadString();
            break;
          }
          case 64: {
            LastCommandMessageId = input.ReadUInt32();
            break;
          }
          case 72: {
            StartedPlayingAt = input.ReadUInt64();
            break;
          }
          case 88: {
            HasBeenPlayingForMs = input.ReadUInt64();
            break;
          }
          case 96: {
            ClientSideTimestamp = input.ReadUInt64();
            break;
          }
          case 104: {
            OnlyWritePlayerState = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CallbackUrl = input.ReadString();
            break;
          }
          case 18: {
            if (device_ == null) {
              Device = new global::Connectstate.Device();
            }
            input.ReadMessage(Device);
            break;
          }
          case 24: {
            MemberType = (global::Connectstate.MemberType) input.ReadEnum();
            break;
          }
          case 32: {
            IsActive = input.ReadBool();
            break;
          }
          case 40: {
            PutStateReason = (global::Connectstate.PutStateReason) input.ReadEnum();
            break;
          }
          case 48: {
            MessageId = input.ReadUInt32();
            break;
          }
          case 58: {
            LastCommandSentByDeviceId = input.ReadString();
            break;
          }
          case 64: {
            LastCommandMessageId = input.ReadUInt32();
            break;
          }
          case 72: {
            StartedPlayingAt = input.ReadUInt64();
            break;
          }
          case 88: {
            HasBeenPlayingForMs = input.ReadUInt64();
            break;
          }
          case 96: {
            ClientSideTimestamp = input.ReadUInt64();
            break;
          }
          case 104: {
            OnlyWritePlayerState = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PrivateDeviceInfo : pb::IMessage<PrivateDeviceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrivateDeviceInfo> _parser = new pb::MessageParser<PrivateDeviceInfo>(() => new PrivateDeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrivateDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDeviceInfo(PrivateDeviceInfo other) : this() {
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrivateDeviceInfo Clone() {
      return new PrivateDeviceInfo(this);
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrivateDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrivateDeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrivateDeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SubscribeRequest : pb::IMessage<SubscribeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SubscribeRequest> _parser = new pb::MessageParser<SubscribeRequest>(() => new SubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest(SubscribeRequest other) : this() {
      callbackUrl_ = other.callbackUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest Clone() {
      return new SubscribeRequest(this);
    }

    /// <summary>Field number for the "callback_url" field.</summary>
    public const int CallbackUrlFieldNumber = 1;
    private string callbackUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CallbackUrl {
      get { return callbackUrl_; }
      set {
        callbackUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallbackUrl != other.CallbackUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallbackUrl.Length != 0) hash ^= CallbackUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallbackUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CallbackUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CallbackUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallbackUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CallbackUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallbackUrl.Length != 0) {
        CallbackUrl = other.CallbackUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CallbackUrl = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CallbackUrl = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeviceInfo : pb::IMessage<DeviceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceInfo> _parser = new pb::MessageParser<DeviceInfo>(() => new DeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo(DeviceInfo other) : this() {
      canPlay_ = other.canPlay_;
      volume_ = other.volume_;
      name_ = other.name_;
      capabilities_ = other.capabilities_ != null ? other.capabilities_.Clone() : null;
      deviceSoftwareVersion_ = other.deviceSoftwareVersion_;
      deviceType_ = other.deviceType_;
      spircVersion_ = other.spircVersion_;
      deviceId_ = other.deviceId_;
      isPrivateSession_ = other.isPrivateSession_;
      isSocialConnect_ = other.isSocialConnect_;
      clientId_ = other.clientId_;
      brand_ = other.brand_;
      model_ = other.model_;
      metadataMap_ = other.metadataMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInfo Clone() {
      return new DeviceInfo(this);
    }

    /// <summary>Field number for the "can_play" field.</summary>
    public const int CanPlayFieldNumber = 1;
    private bool canPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPlay {
      get { return canPlay_; }
      set {
        canPlay_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 2;
    private uint volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 4;
    private global::Connectstate.Capabilities capabilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Capabilities Capabilities {
      get { return capabilities_; }
      set {
        capabilities_ = value;
      }
    }

    /// <summary>Field number for the "device_software_version" field.</summary>
    public const int DeviceSoftwareVersionFieldNumber = 6;
    private string deviceSoftwareVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceSoftwareVersion {
      get { return deviceSoftwareVersion_; }
      set {
        deviceSoftwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_type" field.</summary>
    public const int DeviceTypeFieldNumber = 7;
    private global::Connectstate.DeviceType deviceType_ = global::Connectstate.DeviceType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.DeviceType DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = value;
      }
    }

    /// <summary>Field number for the "spirc_version" field.</summary>
    public const int SpircVersionFieldNumber = 9;
    private string spircVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpircVersion {
      get { return spircVersion_; }
      set {
        spircVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 10;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private_session" field.</summary>
    public const int IsPrivateSessionFieldNumber = 11;
    private bool isPrivateSession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivateSession {
      get { return isPrivateSession_; }
      set {
        isPrivateSession_ = value;
      }
    }

    /// <summary>Field number for the "is_social_connect" field.</summary>
    public const int IsSocialConnectFieldNumber = 12;
    private bool isSocialConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSocialConnect {
      get { return isSocialConnect_; }
      set {
        isSocialConnect_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 13;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 14;
    private string brand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 15;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata_map" field.</summary>
    public const int MetadataMapFieldNumber = 16;
    private static readonly pbc::MapField<string, string>.Codec _map_metadataMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 130);
    private readonly pbc::MapField<string, string> metadataMap_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetadataMap {
      get { return metadataMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanPlay != other.CanPlay) return false;
      if (Volume != other.Volume) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Capabilities, other.Capabilities)) return false;
      if (DeviceSoftwareVersion != other.DeviceSoftwareVersion) return false;
      if (DeviceType != other.DeviceType) return false;
      if (SpircVersion != other.SpircVersion) return false;
      if (DeviceId != other.DeviceId) return false;
      if (IsPrivateSession != other.IsPrivateSession) return false;
      if (IsSocialConnect != other.IsSocialConnect) return false;
      if (ClientId != other.ClientId) return false;
      if (Brand != other.Brand) return false;
      if (Model != other.Model) return false;
      if (!MetadataMap.Equals(other.MetadataMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanPlay != false) hash ^= CanPlay.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (capabilities_ != null) hash ^= Capabilities.GetHashCode();
      if (DeviceSoftwareVersion.Length != 0) hash ^= DeviceSoftwareVersion.GetHashCode();
      if (DeviceType != global::Connectstate.DeviceType.Unknown) hash ^= DeviceType.GetHashCode();
      if (SpircVersion.Length != 0) hash ^= SpircVersion.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (IsPrivateSession != false) hash ^= IsPrivateSession.GetHashCode();
      if (IsSocialConnect != false) hash ^= IsSocialConnect.GetHashCode();
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      hash ^= MetadataMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CanPlay != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanPlay);
      }
      if (Volume != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Volume);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (capabilities_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Capabilities);
      }
      if (DeviceSoftwareVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceSoftwareVersion);
      }
      if (DeviceType != global::Connectstate.DeviceType.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DeviceType);
      }
      if (SpircVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SpircVersion);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceId);
      }
      if (IsPrivateSession != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsPrivateSession);
      }
      if (IsSocialConnect != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsSocialConnect);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ClientId);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Brand);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Model);
      }
      metadataMap_.WriteTo(output, _map_metadataMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CanPlay != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanPlay);
      }
      if (Volume != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Volume);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (capabilities_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Capabilities);
      }
      if (DeviceSoftwareVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceSoftwareVersion);
      }
      if (DeviceType != global::Connectstate.DeviceType.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DeviceType);
      }
      if (SpircVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SpircVersion);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceId);
      }
      if (IsPrivateSession != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsPrivateSession);
      }
      if (IsSocialConnect != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsSocialConnect);
      }
      if (ClientId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ClientId);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Brand);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Model);
      }
      metadataMap_.WriteTo(ref output, _map_metadataMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanPlay != false) {
        size += 1 + 1;
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Volume);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (capabilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Capabilities);
      }
      if (DeviceSoftwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceSoftwareVersion);
      }
      if (DeviceType != global::Connectstate.DeviceType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
      }
      if (SpircVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpircVersion);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (IsPrivateSession != false) {
        size += 1 + 1;
      }
      if (IsSocialConnect != false) {
        size += 1 + 1;
      }
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      size += metadataMap_.CalculateSize(_map_metadataMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.CanPlay != false) {
        CanPlay = other.CanPlay;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.capabilities_ != null) {
        if (capabilities_ == null) {
          Capabilities = new global::Connectstate.Capabilities();
        }
        Capabilities.MergeFrom(other.Capabilities);
      }
      if (other.DeviceSoftwareVersion.Length != 0) {
        DeviceSoftwareVersion = other.DeviceSoftwareVersion;
      }
      if (other.DeviceType != global::Connectstate.DeviceType.Unknown) {
        DeviceType = other.DeviceType;
      }
      if (other.SpircVersion.Length != 0) {
        SpircVersion = other.SpircVersion;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.IsPrivateSession != false) {
        IsPrivateSession = other.IsPrivateSession;
      }
      if (other.IsSocialConnect != false) {
        IsSocialConnect = other.IsSocialConnect;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      metadataMap_.Add(other.metadataMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanPlay = input.ReadBool();
            break;
          }
          case 16: {
            Volume = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (capabilities_ == null) {
              Capabilities = new global::Connectstate.Capabilities();
            }
            input.ReadMessage(Capabilities);
            break;
          }
          case 50: {
            DeviceSoftwareVersion = input.ReadString();
            break;
          }
          case 56: {
            DeviceType = (global::Connectstate.DeviceType) input.ReadEnum();
            break;
          }
          case 74: {
            SpircVersion = input.ReadString();
            break;
          }
          case 82: {
            DeviceId = input.ReadString();
            break;
          }
          case 88: {
            IsPrivateSession = input.ReadBool();
            break;
          }
          case 96: {
            IsSocialConnect = input.ReadBool();
            break;
          }
          case 106: {
            ClientId = input.ReadString();
            break;
          }
          case 114: {
            Brand = input.ReadString();
            break;
          }
          case 122: {
            Model = input.ReadString();
            break;
          }
          case 130: {
            metadataMap_.AddEntriesFrom(input, _map_metadataMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CanPlay = input.ReadBool();
            break;
          }
          case 16: {
            Volume = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (capabilities_ == null) {
              Capabilities = new global::Connectstate.Capabilities();
            }
            input.ReadMessage(Capabilities);
            break;
          }
          case 50: {
            DeviceSoftwareVersion = input.ReadString();
            break;
          }
          case 56: {
            DeviceType = (global::Connectstate.DeviceType) input.ReadEnum();
            break;
          }
          case 74: {
            SpircVersion = input.ReadString();
            break;
          }
          case 82: {
            DeviceId = input.ReadString();
            break;
          }
          case 88: {
            IsPrivateSession = input.ReadBool();
            break;
          }
          case 96: {
            IsSocialConnect = input.ReadBool();
            break;
          }
          case 106: {
            ClientId = input.ReadString();
            break;
          }
          case 114: {
            Brand = input.ReadString();
            break;
          }
          case 122: {
            Model = input.ReadString();
            break;
          }
          case 130: {
            metadataMap_.AddEntriesFrom(ref input, _map_metadataMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Capabilities : pb::IMessage<Capabilities>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Capabilities> _parser = new pb::MessageParser<Capabilities>(() => new Capabilities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Capabilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capabilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capabilities(Capabilities other) : this() {
      canBePlayer_ = other.canBePlayer_;
      restrictToLocal_ = other.restrictToLocal_;
      gaiaEqConnectId_ = other.gaiaEqConnectId_;
      supportsLogout_ = other.supportsLogout_;
      isObservable_ = other.isObservable_;
      volumeSteps_ = other.volumeSteps_;
      supportedTypes_ = other.supportedTypes_.Clone();
      commandAcks_ = other.commandAcks_;
      supportsRename_ = other.supportsRename_;
      hidden_ = other.hidden_;
      disableVolume_ = other.disableVolume_;
      connectDisabled_ = other.connectDisabled_;
      supportsPlaylistV2_ = other.supportsPlaylistV2_;
      isControllable_ = other.isControllable_;
      supportsExternalEpisodes_ = other.supportsExternalEpisodes_;
      supportsSetBackendMetadata_ = other.supportsSetBackendMetadata_;
      supportsTransferCommand_ = other.supportsTransferCommand_;
      supportsCommandRequest_ = other.supportsCommandRequest_;
      isVoiceEnabled_ = other.isVoiceEnabled_;
      needsFullPlayerState_ = other.needsFullPlayerState_;
      supportsGzipPushes_ = other.supportsGzipPushes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Capabilities Clone() {
      return new Capabilities(this);
    }

    /// <summary>Field number for the "can_be_player" field.</summary>
    public const int CanBePlayerFieldNumber = 2;
    private bool canBePlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBePlayer {
      get { return canBePlayer_; }
      set {
        canBePlayer_ = value;
      }
    }

    /// <summary>Field number for the "restrict_to_local" field.</summary>
    public const int RestrictToLocalFieldNumber = 3;
    private bool restrictToLocal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestrictToLocal {
      get { return restrictToLocal_; }
      set {
        restrictToLocal_ = value;
      }
    }

    /// <summary>Field number for the "gaia_eq_connect_id" field.</summary>
    public const int GaiaEqConnectIdFieldNumber = 5;
    private bool gaiaEqConnectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GaiaEqConnectId {
      get { return gaiaEqConnectId_; }
      set {
        gaiaEqConnectId_ = value;
      }
    }

    /// <summary>Field number for the "supports_logout" field.</summary>
    public const int SupportsLogoutFieldNumber = 6;
    private bool supportsLogout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsLogout {
      get { return supportsLogout_; }
      set {
        supportsLogout_ = value;
      }
    }

    /// <summary>Field number for the "is_observable" field.</summary>
    public const int IsObservableFieldNumber = 7;
    private bool isObservable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsObservable {
      get { return isObservable_; }
      set {
        isObservable_ = value;
      }
    }

    /// <summary>Field number for the "volume_steps" field.</summary>
    public const int VolumeStepsFieldNumber = 8;
    private int volumeSteps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeSteps {
      get { return volumeSteps_; }
      set {
        volumeSteps_ = value;
      }
    }

    /// <summary>Field number for the "supported_types" field.</summary>
    public const int SupportedTypesFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_supportedTypes_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> supportedTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SupportedTypes {
      get { return supportedTypes_; }
    }

    /// <summary>Field number for the "command_acks" field.</summary>
    public const int CommandAcksFieldNumber = 10;
    private bool commandAcks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommandAcks {
      get { return commandAcks_; }
      set {
        commandAcks_ = value;
      }
    }

    /// <summary>Field number for the "supports_rename" field.</summary>
    public const int SupportsRenameFieldNumber = 11;
    private bool supportsRename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsRename {
      get { return supportsRename_; }
      set {
        supportsRename_ = value;
      }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 12;
    private bool hidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }

    /// <summary>Field number for the "disable_volume" field.</summary>
    public const int DisableVolumeFieldNumber = 13;
    private bool disableVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableVolume {
      get { return disableVolume_; }
      set {
        disableVolume_ = value;
      }
    }

    /// <summary>Field number for the "connect_disabled" field.</summary>
    public const int ConnectDisabledFieldNumber = 14;
    private bool connectDisabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConnectDisabled {
      get { return connectDisabled_; }
      set {
        connectDisabled_ = value;
      }
    }

    /// <summary>Field number for the "supports_playlist_v2" field.</summary>
    public const int SupportsPlaylistV2FieldNumber = 15;
    private bool supportsPlaylistV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsPlaylistV2 {
      get { return supportsPlaylistV2_; }
      set {
        supportsPlaylistV2_ = value;
      }
    }

    /// <summary>Field number for the "is_controllable" field.</summary>
    public const int IsControllableFieldNumber = 16;
    private bool isControllable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsControllable {
      get { return isControllable_; }
      set {
        isControllable_ = value;
      }
    }

    /// <summary>Field number for the "supports_external_episodes" field.</summary>
    public const int SupportsExternalEpisodesFieldNumber = 17;
    private bool supportsExternalEpisodes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsExternalEpisodes {
      get { return supportsExternalEpisodes_; }
      set {
        supportsExternalEpisodes_ = value;
      }
    }

    /// <summary>Field number for the "supports_set_backend_metadata" field.</summary>
    public const int SupportsSetBackendMetadataFieldNumber = 18;
    private bool supportsSetBackendMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsSetBackendMetadata {
      get { return supportsSetBackendMetadata_; }
      set {
        supportsSetBackendMetadata_ = value;
      }
    }

    /// <summary>Field number for the "supports_transfer_command" field.</summary>
    public const int SupportsTransferCommandFieldNumber = 19;
    private bool supportsTransferCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsTransferCommand {
      get { return supportsTransferCommand_; }
      set {
        supportsTransferCommand_ = value;
      }
    }

    /// <summary>Field number for the "supports_command_request" field.</summary>
    public const int SupportsCommandRequestFieldNumber = 20;
    private bool supportsCommandRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsCommandRequest {
      get { return supportsCommandRequest_; }
      set {
        supportsCommandRequest_ = value;
      }
    }

    /// <summary>Field number for the "is_voice_enabled" field.</summary>
    public const int IsVoiceEnabledFieldNumber = 21;
    private bool isVoiceEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVoiceEnabled {
      get { return isVoiceEnabled_; }
      set {
        isVoiceEnabled_ = value;
      }
    }

    /// <summary>Field number for the "needs_full_player_state" field.</summary>
    public const int NeedsFullPlayerStateFieldNumber = 22;
    private bool needsFullPlayerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedsFullPlayerState {
      get { return needsFullPlayerState_; }
      set {
        needsFullPlayerState_ = value;
      }
    }

    /// <summary>Field number for the "supports_gzip_pushes" field.</summary>
    public const int SupportsGzipPushesFieldNumber = 23;
    private bool supportsGzipPushes_;
    /// <summary>
    /// reserved 1, "supported_contexts";
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsGzipPushes {
      get { return supportsGzipPushes_; }
      set {
        supportsGzipPushes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Capabilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Capabilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanBePlayer != other.CanBePlayer) return false;
      if (RestrictToLocal != other.RestrictToLocal) return false;
      if (GaiaEqConnectId != other.GaiaEqConnectId) return false;
      if (SupportsLogout != other.SupportsLogout) return false;
      if (IsObservable != other.IsObservable) return false;
      if (VolumeSteps != other.VolumeSteps) return false;
      if(!supportedTypes_.Equals(other.supportedTypes_)) return false;
      if (CommandAcks != other.CommandAcks) return false;
      if (SupportsRename != other.SupportsRename) return false;
      if (Hidden != other.Hidden) return false;
      if (DisableVolume != other.DisableVolume) return false;
      if (ConnectDisabled != other.ConnectDisabled) return false;
      if (SupportsPlaylistV2 != other.SupportsPlaylistV2) return false;
      if (IsControllable != other.IsControllable) return false;
      if (SupportsExternalEpisodes != other.SupportsExternalEpisodes) return false;
      if (SupportsSetBackendMetadata != other.SupportsSetBackendMetadata) return false;
      if (SupportsTransferCommand != other.SupportsTransferCommand) return false;
      if (SupportsCommandRequest != other.SupportsCommandRequest) return false;
      if (IsVoiceEnabled != other.IsVoiceEnabled) return false;
      if (NeedsFullPlayerState != other.NeedsFullPlayerState) return false;
      if (SupportsGzipPushes != other.SupportsGzipPushes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanBePlayer != false) hash ^= CanBePlayer.GetHashCode();
      if (RestrictToLocal != false) hash ^= RestrictToLocal.GetHashCode();
      if (GaiaEqConnectId != false) hash ^= GaiaEqConnectId.GetHashCode();
      if (SupportsLogout != false) hash ^= SupportsLogout.GetHashCode();
      if (IsObservable != false) hash ^= IsObservable.GetHashCode();
      if (VolumeSteps != 0) hash ^= VolumeSteps.GetHashCode();
      hash ^= supportedTypes_.GetHashCode();
      if (CommandAcks != false) hash ^= CommandAcks.GetHashCode();
      if (SupportsRename != false) hash ^= SupportsRename.GetHashCode();
      if (Hidden != false) hash ^= Hidden.GetHashCode();
      if (DisableVolume != false) hash ^= DisableVolume.GetHashCode();
      if (ConnectDisabled != false) hash ^= ConnectDisabled.GetHashCode();
      if (SupportsPlaylistV2 != false) hash ^= SupportsPlaylistV2.GetHashCode();
      if (IsControllable != false) hash ^= IsControllable.GetHashCode();
      if (SupportsExternalEpisodes != false) hash ^= SupportsExternalEpisodes.GetHashCode();
      if (SupportsSetBackendMetadata != false) hash ^= SupportsSetBackendMetadata.GetHashCode();
      if (SupportsTransferCommand != false) hash ^= SupportsTransferCommand.GetHashCode();
      if (SupportsCommandRequest != false) hash ^= SupportsCommandRequest.GetHashCode();
      if (IsVoiceEnabled != false) hash ^= IsVoiceEnabled.GetHashCode();
      if (NeedsFullPlayerState != false) hash ^= NeedsFullPlayerState.GetHashCode();
      if (SupportsGzipPushes != false) hash ^= SupportsGzipPushes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CanBePlayer != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanBePlayer);
      }
      if (RestrictToLocal != false) {
        output.WriteRawTag(24);
        output.WriteBool(RestrictToLocal);
      }
      if (GaiaEqConnectId != false) {
        output.WriteRawTag(40);
        output.WriteBool(GaiaEqConnectId);
      }
      if (SupportsLogout != false) {
        output.WriteRawTag(48);
        output.WriteBool(SupportsLogout);
      }
      if (IsObservable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsObservable);
      }
      if (VolumeSteps != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VolumeSteps);
      }
      supportedTypes_.WriteTo(output, _repeated_supportedTypes_codec);
      if (CommandAcks != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandAcks);
      }
      if (SupportsRename != false) {
        output.WriteRawTag(88);
        output.WriteBool(SupportsRename);
      }
      if (Hidden != false) {
        output.WriteRawTag(96);
        output.WriteBool(Hidden);
      }
      if (DisableVolume != false) {
        output.WriteRawTag(104);
        output.WriteBool(DisableVolume);
      }
      if (ConnectDisabled != false) {
        output.WriteRawTag(112);
        output.WriteBool(ConnectDisabled);
      }
      if (SupportsPlaylistV2 != false) {
        output.WriteRawTag(120);
        output.WriteBool(SupportsPlaylistV2);
      }
      if (IsControllable != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsControllable);
      }
      if (SupportsExternalEpisodes != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(SupportsExternalEpisodes);
      }
      if (SupportsSetBackendMetadata != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SupportsSetBackendMetadata);
      }
      if (SupportsTransferCommand != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(SupportsTransferCommand);
      }
      if (SupportsCommandRequest != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(SupportsCommandRequest);
      }
      if (IsVoiceEnabled != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsVoiceEnabled);
      }
      if (NeedsFullPlayerState != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(NeedsFullPlayerState);
      }
      if (SupportsGzipPushes != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SupportsGzipPushes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CanBePlayer != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanBePlayer);
      }
      if (RestrictToLocal != false) {
        output.WriteRawTag(24);
        output.WriteBool(RestrictToLocal);
      }
      if (GaiaEqConnectId != false) {
        output.WriteRawTag(40);
        output.WriteBool(GaiaEqConnectId);
      }
      if (SupportsLogout != false) {
        output.WriteRawTag(48);
        output.WriteBool(SupportsLogout);
      }
      if (IsObservable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsObservable);
      }
      if (VolumeSteps != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VolumeSteps);
      }
      supportedTypes_.WriteTo(ref output, _repeated_supportedTypes_codec);
      if (CommandAcks != false) {
        output.WriteRawTag(80);
        output.WriteBool(CommandAcks);
      }
      if (SupportsRename != false) {
        output.WriteRawTag(88);
        output.WriteBool(SupportsRename);
      }
      if (Hidden != false) {
        output.WriteRawTag(96);
        output.WriteBool(Hidden);
      }
      if (DisableVolume != false) {
        output.WriteRawTag(104);
        output.WriteBool(DisableVolume);
      }
      if (ConnectDisabled != false) {
        output.WriteRawTag(112);
        output.WriteBool(ConnectDisabled);
      }
      if (SupportsPlaylistV2 != false) {
        output.WriteRawTag(120);
        output.WriteBool(SupportsPlaylistV2);
      }
      if (IsControllable != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsControllable);
      }
      if (SupportsExternalEpisodes != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(SupportsExternalEpisodes);
      }
      if (SupportsSetBackendMetadata != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SupportsSetBackendMetadata);
      }
      if (SupportsTransferCommand != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(SupportsTransferCommand);
      }
      if (SupportsCommandRequest != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(SupportsCommandRequest);
      }
      if (IsVoiceEnabled != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsVoiceEnabled);
      }
      if (NeedsFullPlayerState != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(NeedsFullPlayerState);
      }
      if (SupportsGzipPushes != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SupportsGzipPushes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanBePlayer != false) {
        size += 1 + 1;
      }
      if (RestrictToLocal != false) {
        size += 1 + 1;
      }
      if (GaiaEqConnectId != false) {
        size += 1 + 1;
      }
      if (SupportsLogout != false) {
        size += 1 + 1;
      }
      if (IsObservable != false) {
        size += 1 + 1;
      }
      if (VolumeSteps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeSteps);
      }
      size += supportedTypes_.CalculateSize(_repeated_supportedTypes_codec);
      if (CommandAcks != false) {
        size += 1 + 1;
      }
      if (SupportsRename != false) {
        size += 1 + 1;
      }
      if (Hidden != false) {
        size += 1 + 1;
      }
      if (DisableVolume != false) {
        size += 1 + 1;
      }
      if (ConnectDisabled != false) {
        size += 1 + 1;
      }
      if (SupportsPlaylistV2 != false) {
        size += 1 + 1;
      }
      if (IsControllable != false) {
        size += 2 + 1;
      }
      if (SupportsExternalEpisodes != false) {
        size += 2 + 1;
      }
      if (SupportsSetBackendMetadata != false) {
        size += 2 + 1;
      }
      if (SupportsTransferCommand != false) {
        size += 2 + 1;
      }
      if (SupportsCommandRequest != false) {
        size += 2 + 1;
      }
      if (IsVoiceEnabled != false) {
        size += 2 + 1;
      }
      if (NeedsFullPlayerState != false) {
        size += 2 + 1;
      }
      if (SupportsGzipPushes != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Capabilities other) {
      if (other == null) {
        return;
      }
      if (other.CanBePlayer != false) {
        CanBePlayer = other.CanBePlayer;
      }
      if (other.RestrictToLocal != false) {
        RestrictToLocal = other.RestrictToLocal;
      }
      if (other.GaiaEqConnectId != false) {
        GaiaEqConnectId = other.GaiaEqConnectId;
      }
      if (other.SupportsLogout != false) {
        SupportsLogout = other.SupportsLogout;
      }
      if (other.IsObservable != false) {
        IsObservable = other.IsObservable;
      }
      if (other.VolumeSteps != 0) {
        VolumeSteps = other.VolumeSteps;
      }
      supportedTypes_.Add(other.supportedTypes_);
      if (other.CommandAcks != false) {
        CommandAcks = other.CommandAcks;
      }
      if (other.SupportsRename != false) {
        SupportsRename = other.SupportsRename;
      }
      if (other.Hidden != false) {
        Hidden = other.Hidden;
      }
      if (other.DisableVolume != false) {
        DisableVolume = other.DisableVolume;
      }
      if (other.ConnectDisabled != false) {
        ConnectDisabled = other.ConnectDisabled;
      }
      if (other.SupportsPlaylistV2 != false) {
        SupportsPlaylistV2 = other.SupportsPlaylistV2;
      }
      if (other.IsControllable != false) {
        IsControllable = other.IsControllable;
      }
      if (other.SupportsExternalEpisodes != false) {
        SupportsExternalEpisodes = other.SupportsExternalEpisodes;
      }
      if (other.SupportsSetBackendMetadata != false) {
        SupportsSetBackendMetadata = other.SupportsSetBackendMetadata;
      }
      if (other.SupportsTransferCommand != false) {
        SupportsTransferCommand = other.SupportsTransferCommand;
      }
      if (other.SupportsCommandRequest != false) {
        SupportsCommandRequest = other.SupportsCommandRequest;
      }
      if (other.IsVoiceEnabled != false) {
        IsVoiceEnabled = other.IsVoiceEnabled;
      }
      if (other.NeedsFullPlayerState != false) {
        NeedsFullPlayerState = other.NeedsFullPlayerState;
      }
      if (other.SupportsGzipPushes != false) {
        SupportsGzipPushes = other.SupportsGzipPushes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            CanBePlayer = input.ReadBool();
            break;
          }
          case 24: {
            RestrictToLocal = input.ReadBool();
            break;
          }
          case 40: {
            GaiaEqConnectId = input.ReadBool();
            break;
          }
          case 48: {
            SupportsLogout = input.ReadBool();
            break;
          }
          case 56: {
            IsObservable = input.ReadBool();
            break;
          }
          case 64: {
            VolumeSteps = input.ReadInt32();
            break;
          }
          case 74: {
            supportedTypes_.AddEntriesFrom(input, _repeated_supportedTypes_codec);
            break;
          }
          case 80: {
            CommandAcks = input.ReadBool();
            break;
          }
          case 88: {
            SupportsRename = input.ReadBool();
            break;
          }
          case 96: {
            Hidden = input.ReadBool();
            break;
          }
          case 104: {
            DisableVolume = input.ReadBool();
            break;
          }
          case 112: {
            ConnectDisabled = input.ReadBool();
            break;
          }
          case 120: {
            SupportsPlaylistV2 = input.ReadBool();
            break;
          }
          case 128: {
            IsControllable = input.ReadBool();
            break;
          }
          case 136: {
            SupportsExternalEpisodes = input.ReadBool();
            break;
          }
          case 144: {
            SupportsSetBackendMetadata = input.ReadBool();
            break;
          }
          case 152: {
            SupportsTransferCommand = input.ReadBool();
            break;
          }
          case 160: {
            SupportsCommandRequest = input.ReadBool();
            break;
          }
          case 168: {
            IsVoiceEnabled = input.ReadBool();
            break;
          }
          case 176: {
            NeedsFullPlayerState = input.ReadBool();
            break;
          }
          case 184: {
            SupportsGzipPushes = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            CanBePlayer = input.ReadBool();
            break;
          }
          case 24: {
            RestrictToLocal = input.ReadBool();
            break;
          }
          case 40: {
            GaiaEqConnectId = input.ReadBool();
            break;
          }
          case 48: {
            SupportsLogout = input.ReadBool();
            break;
          }
          case 56: {
            IsObservable = input.ReadBool();
            break;
          }
          case 64: {
            VolumeSteps = input.ReadInt32();
            break;
          }
          case 74: {
            supportedTypes_.AddEntriesFrom(ref input, _repeated_supportedTypes_codec);
            break;
          }
          case 80: {
            CommandAcks = input.ReadBool();
            break;
          }
          case 88: {
            SupportsRename = input.ReadBool();
            break;
          }
          case 96: {
            Hidden = input.ReadBool();
            break;
          }
          case 104: {
            DisableVolume = input.ReadBool();
            break;
          }
          case 112: {
            ConnectDisabled = input.ReadBool();
            break;
          }
          case 120: {
            SupportsPlaylistV2 = input.ReadBool();
            break;
          }
          case 128: {
            IsControllable = input.ReadBool();
            break;
          }
          case 136: {
            SupportsExternalEpisodes = input.ReadBool();
            break;
          }
          case 144: {
            SupportsSetBackendMetadata = input.ReadBool();
            break;
          }
          case 152: {
            SupportsTransferCommand = input.ReadBool();
            break;
          }
          case 160: {
            SupportsCommandRequest = input.ReadBool();
            break;
          }
          case 168: {
            IsVoiceEnabled = input.ReadBool();
            break;
          }
          case 176: {
            NeedsFullPlayerState = input.ReadBool();
            break;
          }
          case 184: {
            SupportsGzipPushes = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectCommandOptions : pb::IMessage<ConnectCommandOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectCommandOptions> _parser = new pb::MessageParser<ConnectCommandOptions>(() => new ConnectCommandOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectCommandOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCommandOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCommandOptions(ConnectCommandOptions other) : this() {
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectCommandOptions Clone() {
      return new ConnectCommandOptions(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private int messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectCommandOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectCommandOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectCommandOptions other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MessageId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LogoutCommand : pb::IMessage<LogoutCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogoutCommand> _parser = new pb::MessageParser<LogoutCommand>(() => new LogoutCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutCommand(LogoutCommand other) : this() {
      commandOptions_ = other.commandOptions_ != null ? other.commandOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutCommand Clone() {
      return new LogoutCommand(this);
    }

    /// <summary>Field number for the "command_options" field.</summary>
    public const int CommandOptionsFieldNumber = 1;
    private global::Connectstate.ConnectCommandOptions commandOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ConnectCommandOptions CommandOptions {
      get { return commandOptions_; }
      set {
        commandOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommandOptions, other.CommandOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandOptions_ != null) hash ^= CommandOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commandOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commandOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutCommand other) {
      if (other == null) {
        return;
      }
      if (other.commandOptions_ != null) {
        if (commandOptions_ == null) {
          CommandOptions = new global::Connectstate.ConnectCommandOptions();
        }
        CommandOptions.MergeFrom(other.CommandOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetVolumeCommand : pb::IMessage<SetVolumeCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetVolumeCommand> _parser = new pb::MessageParser<SetVolumeCommand>(() => new SetVolumeCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVolumeCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVolumeCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVolumeCommand(SetVolumeCommand other) : this() {
      volume_ = other.volume_;
      commandOptions_ = other.commandOptions_ != null ? other.commandOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVolumeCommand Clone() {
      return new SetVolumeCommand(this);
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 1;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "command_options" field.</summary>
    public const int CommandOptionsFieldNumber = 2;
    private global::Connectstate.ConnectCommandOptions commandOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ConnectCommandOptions CommandOptions {
      get { return commandOptions_; }
      set {
        commandOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVolumeCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVolumeCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Volume != other.Volume) return false;
      if (!object.Equals(CommandOptions, other.CommandOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (commandOptions_ != null) hash ^= CommandOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Volume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Volume);
      }
      if (commandOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Volume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Volume);
      }
      if (commandOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (commandOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVolumeCommand other) {
      if (other == null) {
        return;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.commandOptions_ != null) {
        if (commandOptions_ == null) {
          CommandOptions = new global::Connectstate.ConnectCommandOptions();
        }
        CommandOptions.MergeFrom(other.CommandOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Volume = input.ReadInt32();
            break;
          }
          case 18: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Volume = input.ReadInt32();
            break;
          }
          case 18: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RenameCommand : pb::IMessage<RenameCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenameCommand> _parser = new pb::MessageParser<RenameCommand>(() => new RenameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCommand(RenameCommand other) : this() {
      renameTo_ = other.renameTo_;
      commandOptions_ = other.commandOptions_ != null ? other.commandOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameCommand Clone() {
      return new RenameCommand(this);
    }

    /// <summary>Field number for the "rename_to" field.</summary>
    public const int RenameToFieldNumber = 1;
    private string renameTo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RenameTo {
      get { return renameTo_; }
      set {
        renameTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_options" field.</summary>
    public const int CommandOptionsFieldNumber = 2;
    private global::Connectstate.ConnectCommandOptions commandOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ConnectCommandOptions CommandOptions {
      get { return commandOptions_; }
      set {
        commandOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RenameTo != other.RenameTo) return false;
      if (!object.Equals(CommandOptions, other.CommandOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RenameTo.Length != 0) hash ^= RenameTo.GetHashCode();
      if (commandOptions_ != null) hash ^= CommandOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RenameTo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RenameTo);
      }
      if (commandOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RenameTo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RenameTo);
      }
      if (commandOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CommandOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RenameTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenameTo);
      }
      if (commandOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommandOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameCommand other) {
      if (other == null) {
        return;
      }
      if (other.RenameTo.Length != 0) {
        RenameTo = other.RenameTo;
      }
      if (other.commandOptions_ != null) {
        if (commandOptions_ == null) {
          CommandOptions = new global::Connectstate.ConnectCommandOptions();
        }
        CommandOptions.MergeFrom(other.CommandOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RenameTo = input.ReadString();
            break;
          }
          case 18: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RenameTo = input.ReadString();
            break;
          }
          case 18: {
            if (commandOptions_ == null) {
              CommandOptions = new global::Connectstate.ConnectCommandOptions();
            }
            input.ReadMessage(CommandOptions);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetBackendMetadataCommand : pb::IMessage<SetBackendMetadataCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetBackendMetadataCommand> _parser = new pb::MessageParser<SetBackendMetadataCommand>(() => new SetBackendMetadataCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBackendMetadataCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.ConnectReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBackendMetadataCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBackendMetadataCommand(SetBackendMetadataCommand other) : this() {
      metadata_ = other.metadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBackendMetadataCommand Clone() {
      return new SetBackendMetadataCommand(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBackendMetadataCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBackendMetadataCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Metadata.Equals(other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      metadata_.WriteTo(output, _map_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      metadata_.WriteTo(ref output, _map_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBackendMetadataCommand other) {
      if (other == null) {
        return;
      }
      metadata_.Add(other.metadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            metadata_.AddEntriesFrom(ref input, _map_metadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
