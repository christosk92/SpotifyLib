// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: playback.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spotify.Player.Proto.Transfer {

  /// <summary>Holder for reflection information generated from playback.proto</summary>
  public static partial class PlaybackReflection {

    #region Descriptor
    /// <summary>File descriptor for playback.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlaybackReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wbGF5YmFjay5wcm90bxIdc3BvdGlmeS5wbGF5ZXIucHJvdG8udHJhbnNm",
            "ZXIaE2NvbnRleHRfdHJhY2sucHJvdG8ipQEKCFBsYXliYWNrEhEKCXRpbWVz",
            "dGFtcBgBIAEoAxIgChhwb3NpdGlvbl9hc19vZl90aW1lc3RhbXAYAiABKAUS",
            "FgoOcGxheWJhY2tfc3BlZWQYAyABKAESEQoJaXNfcGF1c2VkGAQgASgIEjkK",
            "DWN1cnJlbnRfdHJhY2sYBSABKAsyIi5zcG90aWZ5LnBsYXllci5wcm90by5D",
            "b250ZXh0VHJhY2tCGAoUY29tLnNwb3RpZnkudHJhbnNmZXJIAg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spotify.Player.Proto.ContextTrackReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spotify.Player.Proto.Transfer.Playback), global::Spotify.Player.Proto.Transfer.Playback.Parser, new[]{ "Timestamp", "PositionAsOfTimestamp", "PlaybackSpeed", "IsPaused", "CurrentTrack" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Playback : pb::IMessage<Playback>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Playback> _parser = new pb::MessageParser<Playback>(() => new Playback());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Playback> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spotify.Player.Proto.Transfer.PlaybackReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Playback() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Playback(Playback other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      positionAsOfTimestamp_ = other.positionAsOfTimestamp_;
      playbackSpeed_ = other.playbackSpeed_;
      isPaused_ = other.isPaused_;
      currentTrack_ = other.currentTrack_ != null ? other.currentTrack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Playback Clone() {
      return new Playback(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static long TimestampDefaultValue = 0L;

    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "position_as_of_timestamp" field.</summary>
    public const int PositionAsOfTimestampFieldNumber = 2;
    private readonly static int PositionAsOfTimestampDefaultValue = 0;

    private int positionAsOfTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PositionAsOfTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return positionAsOfTimestamp_; } else { return PositionAsOfTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        positionAsOfTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "position_as_of_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPositionAsOfTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "position_as_of_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPositionAsOfTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "playback_speed" field.</summary>
    public const int PlaybackSpeedFieldNumber = 3;
    private readonly static double PlaybackSpeedDefaultValue = 0D;

    private double playbackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlaybackSpeed {
      get { if ((_hasBits0 & 4) != 0) { return playbackSpeed_; } else { return PlaybackSpeedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        playbackSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "playback_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPlaybackSpeed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "playback_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlaybackSpeed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_paused" field.</summary>
    public const int IsPausedFieldNumber = 4;
    private readonly static bool IsPausedDefaultValue = false;

    private bool isPaused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPaused {
      get { if ((_hasBits0 & 8) != 0) { return isPaused_; } else { return IsPausedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isPaused_ = value;
      }
    }
    /// <summary>Gets whether the "is_paused" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsPaused {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_paused" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsPaused() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "current_track" field.</summary>
    public const int CurrentTrackFieldNumber = 5;
    private global::Spotify.Player.Proto.ContextTrack currentTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Spotify.Player.Proto.ContextTrack CurrentTrack {
      get { return currentTrack_; }
      set {
        currentTrack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Playback);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Playback other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (PositionAsOfTimestamp != other.PositionAsOfTimestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlaybackSpeed, other.PlaybackSpeed)) return false;
      if (IsPaused != other.IsPaused) return false;
      if (!object.Equals(CurrentTrack, other.CurrentTrack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasPositionAsOfTimestamp) hash ^= PositionAsOfTimestamp.GetHashCode();
      if (HasPlaybackSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlaybackSpeed);
      if (HasIsPaused) hash ^= IsPaused.GetHashCode();
      if (currentTrack_ != null) hash ^= CurrentTrack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasPositionAsOfTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionAsOfTimestamp);
      }
      if (HasPlaybackSpeed) {
        output.WriteRawTag(25);
        output.WriteDouble(PlaybackSpeed);
      }
      if (HasIsPaused) {
        output.WriteRawTag(32);
        output.WriteBool(IsPaused);
      }
      if (currentTrack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasPositionAsOfTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt32(PositionAsOfTimestamp);
      }
      if (HasPlaybackSpeed) {
        output.WriteRawTag(25);
        output.WriteDouble(PlaybackSpeed);
      }
      if (HasIsPaused) {
        output.WriteRawTag(32);
        output.WriteBool(IsPaused);
      }
      if (currentTrack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CurrentTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasPositionAsOfTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionAsOfTimestamp);
      }
      if (HasPlaybackSpeed) {
        size += 1 + 8;
      }
      if (HasIsPaused) {
        size += 1 + 1;
      }
      if (currentTrack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTrack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Playback other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasPositionAsOfTimestamp) {
        PositionAsOfTimestamp = other.PositionAsOfTimestamp;
      }
      if (other.HasPlaybackSpeed) {
        PlaybackSpeed = other.PlaybackSpeed;
      }
      if (other.HasIsPaused) {
        IsPaused = other.IsPaused;
      }
      if (other.currentTrack_ != null) {
        if (currentTrack_ == null) {
          CurrentTrack = new global::Spotify.Player.Proto.ContextTrack();
        }
        CurrentTrack.MergeFrom(other.CurrentTrack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            PositionAsOfTimestamp = input.ReadInt32();
            break;
          }
          case 25: {
            PlaybackSpeed = input.ReadDouble();
            break;
          }
          case 32: {
            IsPaused = input.ReadBool();
            break;
          }
          case 42: {
            if (currentTrack_ == null) {
              CurrentTrack = new global::Spotify.Player.Proto.ContextTrack();
            }
            input.ReadMessage(CurrentTrack);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            PositionAsOfTimestamp = input.ReadInt32();
            break;
          }
          case 25: {
            PlaybackSpeed = input.ReadDouble();
            break;
          }
          case 32: {
            IsPaused = input.ReadBool();
            break;
          }
          case 42: {
            if (currentTrack_ == null) {
              CurrentTrack = new global::Spotify.Player.Proto.ContextTrack();
            }
            input.ReadMessage(CurrentTrack);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
