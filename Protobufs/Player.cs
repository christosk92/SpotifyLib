// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: player.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Connectstate {

  /// <summary>Holder for reflection information generated from player.proto</summary>
  public static partial class PlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxwbGF5ZXIucHJvdG8SDGNvbm5lY3RzdGF0ZSLqCAoLUGxheWVyU3RhdGUS",
            "EQoJdGltZXN0YW1wGAEgASgDEhMKC2NvbnRleHRfdXJpGAIgASgJEhMKC2Nv",
            "bnRleHRfdXJsGAMgASgJEjgKFGNvbnRleHRfcmVzdHJpY3Rpb25zGAQgASgL",
            "MhouY29ubmVjdHN0YXRlLlJlc3RyaWN0aW9ucxItCgtwbGF5X29yaWdpbhgF",
            "IAEoCzIYLmNvbm5lY3RzdGF0ZS5QbGF5T3JpZ2luEikKBWluZGV4GAYgASgL",
            "MhouY29ubmVjdHN0YXRlLkNvbnRleHRJbmRleBIqCgV0cmFjaxgHIAEoCzIb",
            "LmNvbm5lY3RzdGF0ZS5Qcm92aWRlZFRyYWNrEhMKC3BsYXliYWNrX2lkGAgg",
            "ASgJEhYKDnBsYXliYWNrX3NwZWVkGAkgASgBEiAKGHBvc2l0aW9uX2FzX29m",
            "X3RpbWVzdGFtcBgKIAEoAxIQCghkdXJhdGlvbhgLIAEoAxISCgppc19wbGF5",
            "aW5nGAwgASgIEhEKCWlzX3BhdXNlZBgNIAEoCBIUCgxpc19idWZmZXJpbmcY",
            "DiABKAgSGwoTaXNfc3lzdGVtX2luaXRpYXRlZBgPIAEoCBIzCgdvcHRpb25z",
            "GBAgASgLMiIuY29ubmVjdHN0YXRlLkNvbnRleHRQbGF5ZXJPcHRpb25zEjAK",
            "DHJlc3RyaWN0aW9ucxgRIAEoCzIaLmNvbm5lY3RzdGF0ZS5SZXN0cmljdGlv",
            "bnMSMAoMc3VwcHJlc3Npb25zGBIgASgLMhouY29ubmVjdHN0YXRlLlN1cHBy",
            "ZXNzaW9ucxIwCgtwcmV2X3RyYWNrcxgTIAMoCzIbLmNvbm5lY3RzdGF0ZS5Q",
            "cm92aWRlZFRyYWNrEjAKC25leHRfdHJhY2tzGBQgAygLMhsuY29ubmVjdHN0",
            "YXRlLlByb3ZpZGVkVHJhY2sSSAoQY29udGV4dF9tZXRhZGF0YRgVIAMoCzIu",
            "LmNvbm5lY3RzdGF0ZS5QbGF5ZXJTdGF0ZS5Db250ZXh0TWV0YWRhdGFFbnRy",
            "eRJCCg1wYWdlX21ldGFkYXRhGBYgAygLMisuY29ubmVjdHN0YXRlLlBsYXll",
            "clN0YXRlLlBhZ2VNZXRhZGF0YUVudHJ5EhIKCnNlc3Npb25faWQYFyABKAkS",
            "FgoOcXVldWVfcmV2aXNpb24YGCABKAkSEAoIcG9zaXRpb24YGSABKAMSEgoK",
            "ZW50aXR5X3VyaRgaIAEoCRIsCgdyZXZlcnNlGBsgAygLMhsuY29ubmVjdHN0",
            "YXRlLlByb3ZpZGVkVHJhY2sSKwoGZnV0dXJlGBwgAygLMhsuY29ubmVjdHN0",
            "YXRlLlByb3ZpZGVkVHJhY2saNgoUQ29udGV4dE1ldGFkYXRhRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARozChFQYWdlTWV0YWRhdGFF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBItoCCg1Qcm92",
            "aWRlZFRyYWNrEgsKA3VyaRgBIAEoCRILCgN1aWQYAiABKAkSOwoIbWV0YWRh",
            "dGEYAyADKAsyKS5jb25uZWN0c3RhdGUuUHJvdmlkZWRUcmFjay5NZXRhZGF0",
            "YUVudHJ5Eg8KB3JlbW92ZWQYBCADKAkSDwoHYmxvY2tlZBgFIAMoCRIQCghw",
            "cm92aWRlchgGIAEoCRIwCgxyZXN0cmljdGlvbnMYByABKAsyGi5jb25uZWN0",
            "c3RhdGUuUmVzdHJpY3Rpb25zEhEKCWFsYnVtX3VyaRgIIAEoCRIYChBkaXNh",
            "bGxvd19yZWFzb25zGAkgAygJEhIKCmFydGlzdF91cmkYCiABKAkSGgoSZGlz",
            "YWxsb3dfdW5kZWNpZGVkGAsgAygJGi8KDU1ldGFkYXRhRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIrCgxDb250ZXh0SW5kZXgSDAoE",
            "cGFnZRgBIAEoDRINCgV0cmFjaxgCIAEoDSKACAoMUmVzdHJpY3Rpb25zEiAK",
            "GGRpc2FsbG93X3BhdXNpbmdfcmVhc29ucxgBIAMoCRIhChlkaXNhbGxvd19y",
            "ZXN1bWluZ19yZWFzb25zGAIgAygJEiAKGGRpc2FsbG93X3NlZWtpbmdfcmVh",
            "c29ucxgDIAMoCRIlCh1kaXNhbGxvd19wZWVraW5nX3ByZXZfcmVhc29ucxgE",
            "IAMoCRIlCh1kaXNhbGxvd19wZWVraW5nX25leHRfcmVhc29ucxgFIAMoCRIm",
            "Ch5kaXNhbGxvd19za2lwcGluZ19wcmV2X3JlYXNvbnMYBiADKAkSJgoeZGlz",
            "YWxsb3dfc2tpcHBpbmdfbmV4dF9yZWFzb25zGAcgAygJEjAKKGRpc2FsbG93",
            "X3RvZ2dsaW5nX3JlcGVhdF9jb250ZXh0X3JlYXNvbnMYCCADKAkSLgomZGlz",
            "YWxsb3dfdG9nZ2xpbmdfcmVwZWF0X3RyYWNrX3JlYXNvbnMYCSADKAkSKQoh",
            "ZGlzYWxsb3dfdG9nZ2xpbmdfc2h1ZmZsZV9yZWFzb25zGAogAygJEiIKGmRp",
            "c2FsbG93X3NldF9xdWV1ZV9yZWFzb25zGAsgAygJEi4KJmRpc2FsbG93X2lu",
            "dGVycnVwdGluZ19wbGF5YmFja19yZWFzb25zGAwgAygJEi4KJmRpc2FsbG93",
            "X3RyYW5zZmVycmluZ19wbGF5YmFja19yZWFzb25zGA0gAygJEicKH2Rpc2Fs",
            "bG93X3JlbW90ZV9jb250cm9sX3JlYXNvbnMYDiADKAkSMworZGlzYWxsb3df",
            "aW5zZXJ0aW5nX2ludG9fbmV4dF90cmFja3NfcmVhc29ucxgPIAMoCRI2Ci5k",
            "aXNhbGxvd19pbnNlcnRpbmdfaW50b19jb250ZXh0X3RyYWNrc19yZWFzb25z",
            "GBAgAygJEjIKKmRpc2FsbG93X3Jlb3JkZXJpbmdfaW5fbmV4dF90cmFja3Nf",
            "cmVhc29ucxgRIAMoCRI1Ci1kaXNhbGxvd19yZW9yZGVyaW5nX2luX2NvbnRl",
            "eHRfdHJhY2tzX3JlYXNvbnMYEiADKAkSMgoqZGlzYWxsb3dfcmVtb3Zpbmdf",
            "ZnJvbV9uZXh0X3RyYWNrc19yZWFzb25zGBMgAygJEjUKLWRpc2FsbG93X3Jl",
            "bW92aW5nX2Zyb21fY29udGV4dF90cmFja3NfcmVhc29ucxgUIAMoCRIpCiFk",
            "aXNhbGxvd191cGRhdGluZ19jb250ZXh0X3JlYXNvbnMYFSADKAkSIAoYZGlz",
            "YWxsb3dfcGxheWluZ19yZWFzb25zGBYgAygJEiEKGWRpc2FsbG93X3N0b3Bw",
            "aW5nX3JlYXNvbnMYFyADKAkivwEKClBsYXlPcmlnaW4SGgoSZmVhdHVyZV9p",
            "ZGVudGlmaWVyGAEgASgJEhcKD2ZlYXR1cmVfdmVyc2lvbhgCIAEoCRIQCgh2",
            "aWV3X3VyaRgDIAEoCRIZChFleHRlcm5hbF9yZWZlcnJlchgEIAEoCRIbChNy",
            "ZWZlcnJlcl9pZGVudGlmaWVyGAUgASgJEhkKEWRldmljZV9pZGVudGlmaWVy",
            "GAYgASgJEhcKD2ZlYXR1cmVfY2xhc3NlcxgHIAMoCSJlChRDb250ZXh0UGxh",
            "eWVyT3B0aW9ucxIZChFzaHVmZmxpbmdfY29udGV4dBgBIAEoCBIZChFyZXBl",
            "YXRpbmdfY29udGV4dBgCIAEoCBIXCg9yZXBlYXRpbmdfdHJhY2sYAyABKAgi",
            "IQoMU3VwcHJlc3Npb25zEhEKCXByb3ZpZGVycxgBIAMoCUIcChhjb20uc3Bv",
            "dGlmeS5jb25uZWN0c3RhdGVIAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.PlayerState), global::Connectstate.PlayerState.Parser, new[]{ "Timestamp", "ContextUri", "ContextUrl", "ContextRestrictions", "PlayOrigin", "Index", "Track", "PlaybackId", "PlaybackSpeed", "PositionAsOfTimestamp", "Duration", "IsPlaying", "IsPaused", "IsBuffering", "IsSystemInitiated", "Options", "Restrictions", "Suppressions", "PrevTracks", "NextTracks", "ContextMetadata", "PageMetadata", "SessionId", "QueueRevision", "Position", "EntityUri", "Reverse", "Future" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.ProvidedTrack), global::Connectstate.ProvidedTrack.Parser, new[]{ "Uri", "Uid", "Metadata", "Removed", "Blocked", "Provider", "Restrictions", "AlbumUri", "DisallowReasons", "ArtistUri", "DisallowUndecided" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.ContextIndex), global::Connectstate.ContextIndex.Parser, new[]{ "Page", "Track" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.Restrictions), global::Connectstate.Restrictions.Parser, new[]{ "DisallowPausingReasons", "DisallowResumingReasons", "DisallowSeekingReasons", "DisallowPeekingPrevReasons", "DisallowPeekingNextReasons", "DisallowSkippingPrevReasons", "DisallowSkippingNextReasons", "DisallowTogglingRepeatContextReasons", "DisallowTogglingRepeatTrackReasons", "DisallowTogglingShuffleReasons", "DisallowSetQueueReasons", "DisallowInterruptingPlaybackReasons", "DisallowTransferringPlaybackReasons", "DisallowRemoteControlReasons", "DisallowInsertingIntoNextTracksReasons", "DisallowInsertingIntoContextTracksReasons", "DisallowReorderingInNextTracksReasons", "DisallowReorderingInContextTracksReasons", "DisallowRemovingFromNextTracksReasons", "DisallowRemovingFromContextTracksReasons", "DisallowUpdatingContextReasons", "DisallowPlayingReasons", "DisallowStoppingReasons" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.PlayOrigin), global::Connectstate.PlayOrigin.Parser, new[]{ "FeatureIdentifier", "FeatureVersion", "ViewUri", "ExternalReferrer", "ReferrerIdentifier", "DeviceIdentifier", "FeatureClasses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.ContextPlayerOptions), global::Connectstate.ContextPlayerOptions.Parser, new[]{ "ShufflingContext", "RepeatingContext", "RepeatingTrack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Connectstate.Suppressions), global::Connectstate.Suppressions.Parser, new[]{ "Providers" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerState : pb::IMessage<PlayerState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState(PlayerState other) : this() {
      timestamp_ = other.timestamp_;
      contextUri_ = other.contextUri_;
      contextUrl_ = other.contextUrl_;
      contextRestrictions_ = other.contextRestrictions_ != null ? other.contextRestrictions_.Clone() : null;
      playOrigin_ = other.playOrigin_ != null ? other.playOrigin_.Clone() : null;
      index_ = other.index_ != null ? other.index_.Clone() : null;
      track_ = other.track_ != null ? other.track_.Clone() : null;
      playbackId_ = other.playbackId_;
      playbackSpeed_ = other.playbackSpeed_;
      positionAsOfTimestamp_ = other.positionAsOfTimestamp_;
      duration_ = other.duration_;
      isPlaying_ = other.isPlaying_;
      isPaused_ = other.isPaused_;
      isBuffering_ = other.isBuffering_;
      isSystemInitiated_ = other.isSystemInitiated_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      restrictions_ = other.restrictions_ != null ? other.restrictions_.Clone() : null;
      suppressions_ = other.suppressions_ != null ? other.suppressions_.Clone() : null;
      prevTracks_ = other.prevTracks_.Clone();
      nextTracks_ = other.nextTracks_.Clone();
      contextMetadata_ = other.contextMetadata_.Clone();
      pageMetadata_ = other.pageMetadata_.Clone();
      sessionId_ = other.sessionId_;
      queueRevision_ = other.queueRevision_;
      position_ = other.position_;
      entityUri_ = other.entityUri_;
      reverse_ = other.reverse_.Clone();
      future_ = other.future_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerState Clone() {
      return new PlayerState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "context_uri" field.</summary>
    public const int ContextUriFieldNumber = 2;
    private string contextUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextUri {
      get { return contextUri_; }
      set {
        contextUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context_url" field.</summary>
    public const int ContextUrlFieldNumber = 3;
    private string contextUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextUrl {
      get { return contextUrl_; }
      set {
        contextUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context_restrictions" field.</summary>
    public const int ContextRestrictionsFieldNumber = 4;
    private global::Connectstate.Restrictions contextRestrictions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Restrictions ContextRestrictions {
      get { return contextRestrictions_; }
      set {
        contextRestrictions_ = value;
      }
    }

    /// <summary>Field number for the "play_origin" field.</summary>
    public const int PlayOriginFieldNumber = 5;
    private global::Connectstate.PlayOrigin playOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.PlayOrigin PlayOrigin {
      get { return playOrigin_; }
      set {
        playOrigin_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private global::Connectstate.ContextIndex index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ContextIndex Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "track" field.</summary>
    public const int TrackFieldNumber = 7;
    private global::Connectstate.ProvidedTrack track_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ProvidedTrack Track {
      get { return track_; }
      set {
        track_ = value;
      }
    }

    /// <summary>Field number for the "playback_id" field.</summary>
    public const int PlaybackIdFieldNumber = 8;
    private string playbackId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaybackId {
      get { return playbackId_; }
      set {
        playbackId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playback_speed" field.</summary>
    public const int PlaybackSpeedFieldNumber = 9;
    private double playbackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PlaybackSpeed {
      get { return playbackSpeed_; }
      set {
        playbackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "position_as_of_timestamp" field.</summary>
    public const int PositionAsOfTimestampFieldNumber = 10;
    private long positionAsOfTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PositionAsOfTimestamp {
      get { return positionAsOfTimestamp_; }
      set {
        positionAsOfTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 11;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 12;
    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    /// <summary>Field number for the "is_paused" field.</summary>
    public const int IsPausedFieldNumber = 13;
    private bool isPaused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPaused {
      get { return isPaused_; }
      set {
        isPaused_ = value;
      }
    }

    /// <summary>Field number for the "is_buffering" field.</summary>
    public const int IsBufferingFieldNumber = 14;
    private bool isBuffering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuffering {
      get { return isBuffering_; }
      set {
        isBuffering_ = value;
      }
    }

    /// <summary>Field number for the "is_system_initiated" field.</summary>
    public const int IsSystemInitiatedFieldNumber = 15;
    private bool isSystemInitiated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSystemInitiated {
      get { return isSystemInitiated_; }
      set {
        isSystemInitiated_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 16;
    private global::Connectstate.ContextPlayerOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.ContextPlayerOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "restrictions" field.</summary>
    public const int RestrictionsFieldNumber = 17;
    private global::Connectstate.Restrictions restrictions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Restrictions Restrictions {
      get { return restrictions_; }
      set {
        restrictions_ = value;
      }
    }

    /// <summary>Field number for the "suppressions" field.</summary>
    public const int SuppressionsFieldNumber = 18;
    private global::Connectstate.Suppressions suppressions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Suppressions Suppressions {
      get { return suppressions_; }
      set {
        suppressions_ = value;
      }
    }

    /// <summary>Field number for the "prev_tracks" field.</summary>
    public const int PrevTracksFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Connectstate.ProvidedTrack> _repeated_prevTracks_codec
        = pb::FieldCodec.ForMessage(154, global::Connectstate.ProvidedTrack.Parser);
    private readonly pbc::RepeatedField<global::Connectstate.ProvidedTrack> prevTracks_ = new pbc::RepeatedField<global::Connectstate.ProvidedTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connectstate.ProvidedTrack> PrevTracks {
      get { return prevTracks_; }
    }

    /// <summary>Field number for the "next_tracks" field.</summary>
    public const int NextTracksFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Connectstate.ProvidedTrack> _repeated_nextTracks_codec
        = pb::FieldCodec.ForMessage(162, global::Connectstate.ProvidedTrack.Parser);
    private readonly pbc::RepeatedField<global::Connectstate.ProvidedTrack> nextTracks_ = new pbc::RepeatedField<global::Connectstate.ProvidedTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connectstate.ProvidedTrack> NextTracks {
      get { return nextTracks_; }
    }

    /// <summary>Field number for the "context_metadata" field.</summary>
    public const int ContextMetadataFieldNumber = 21;
    private static readonly pbc::MapField<string, string>.Codec _map_contextMetadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 170);
    private readonly pbc::MapField<string, string> contextMetadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ContextMetadata {
      get { return contextMetadata_; }
    }

    /// <summary>Field number for the "page_metadata" field.</summary>
    public const int PageMetadataFieldNumber = 22;
    private static readonly pbc::MapField<string, string>.Codec _map_pageMetadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 178);
    private readonly pbc::MapField<string, string> pageMetadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> PageMetadata {
      get { return pageMetadata_; }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 23;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queue_revision" field.</summary>
    public const int QueueRevisionFieldNumber = 24;
    private string queueRevision_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueRevision {
      get { return queueRevision_; }
      set {
        queueRevision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 25;
    private long position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "entity_uri" field.</summary>
    public const int EntityUriFieldNumber = 26;
    private string entityUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityUri {
      get { return entityUri_; }
      set {
        entityUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Connectstate.ProvidedTrack> _repeated_reverse_codec
        = pb::FieldCodec.ForMessage(218, global::Connectstate.ProvidedTrack.Parser);
    private readonly pbc::RepeatedField<global::Connectstate.ProvidedTrack> reverse_ = new pbc::RepeatedField<global::Connectstate.ProvidedTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connectstate.ProvidedTrack> Reverse {
      get { return reverse_; }
    }

    /// <summary>Field number for the "future" field.</summary>
    public const int FutureFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Connectstate.ProvidedTrack> _repeated_future_codec
        = pb::FieldCodec.ForMessage(226, global::Connectstate.ProvidedTrack.Parser);
    private readonly pbc::RepeatedField<global::Connectstate.ProvidedTrack> future_ = new pbc::RepeatedField<global::Connectstate.ProvidedTrack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Connectstate.ProvidedTrack> Future {
      get { return future_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ContextUri != other.ContextUri) return false;
      if (ContextUrl != other.ContextUrl) return false;
      if (!object.Equals(ContextRestrictions, other.ContextRestrictions)) return false;
      if (!object.Equals(PlayOrigin, other.PlayOrigin)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(Track, other.Track)) return false;
      if (PlaybackId != other.PlaybackId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlaybackSpeed, other.PlaybackSpeed)) return false;
      if (PositionAsOfTimestamp != other.PositionAsOfTimestamp) return false;
      if (Duration != other.Duration) return false;
      if (IsPlaying != other.IsPlaying) return false;
      if (IsPaused != other.IsPaused) return false;
      if (IsBuffering != other.IsBuffering) return false;
      if (IsSystemInitiated != other.IsSystemInitiated) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if (!object.Equals(Restrictions, other.Restrictions)) return false;
      if (!object.Equals(Suppressions, other.Suppressions)) return false;
      if(!prevTracks_.Equals(other.prevTracks_)) return false;
      if(!nextTracks_.Equals(other.nextTracks_)) return false;
      if (!ContextMetadata.Equals(other.ContextMetadata)) return false;
      if (!PageMetadata.Equals(other.PageMetadata)) return false;
      if (SessionId != other.SessionId) return false;
      if (QueueRevision != other.QueueRevision) return false;
      if (Position != other.Position) return false;
      if (EntityUri != other.EntityUri) return false;
      if(!reverse_.Equals(other.reverse_)) return false;
      if(!future_.Equals(other.future_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (ContextUri.Length != 0) hash ^= ContextUri.GetHashCode();
      if (ContextUrl.Length != 0) hash ^= ContextUrl.GetHashCode();
      if (contextRestrictions_ != null) hash ^= ContextRestrictions.GetHashCode();
      if (playOrigin_ != null) hash ^= PlayOrigin.GetHashCode();
      if (index_ != null) hash ^= Index.GetHashCode();
      if (track_ != null) hash ^= Track.GetHashCode();
      if (PlaybackId.Length != 0) hash ^= PlaybackId.GetHashCode();
      if (PlaybackSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlaybackSpeed);
      if (PositionAsOfTimestamp != 0L) hash ^= PositionAsOfTimestamp.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (IsPlaying != false) hash ^= IsPlaying.GetHashCode();
      if (IsPaused != false) hash ^= IsPaused.GetHashCode();
      if (IsBuffering != false) hash ^= IsBuffering.GetHashCode();
      if (IsSystemInitiated != false) hash ^= IsSystemInitiated.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (restrictions_ != null) hash ^= Restrictions.GetHashCode();
      if (suppressions_ != null) hash ^= Suppressions.GetHashCode();
      hash ^= prevTracks_.GetHashCode();
      hash ^= nextTracks_.GetHashCode();
      hash ^= ContextMetadata.GetHashCode();
      hash ^= PageMetadata.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (QueueRevision.Length != 0) hash ^= QueueRevision.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (EntityUri.Length != 0) hash ^= EntityUri.GetHashCode();
      hash ^= reverse_.GetHashCode();
      hash ^= future_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (ContextUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextUri);
      }
      if (ContextUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContextUrl);
      }
      if (contextRestrictions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContextRestrictions);
      }
      if (playOrigin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayOrigin);
      }
      if (index_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Index);
      }
      if (track_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Track);
      }
      if (PlaybackId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PlaybackId);
      }
      if (PlaybackSpeed != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PlaybackSpeed);
      }
      if (PositionAsOfTimestamp != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(PositionAsOfTimestamp);
      }
      if (Duration != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Duration);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPlaying);
      }
      if (IsPaused != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPaused);
      }
      if (IsBuffering != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsBuffering);
      }
      if (IsSystemInitiated != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsSystemInitiated);
      }
      if (options_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Options);
      }
      if (restrictions_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Restrictions);
      }
      if (suppressions_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Suppressions);
      }
      prevTracks_.WriteTo(output, _repeated_prevTracks_codec);
      nextTracks_.WriteTo(output, _repeated_nextTracks_codec);
      contextMetadata_.WriteTo(output, _map_contextMetadata_codec);
      pageMetadata_.WriteTo(output, _map_pageMetadata_codec);
      if (SessionId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SessionId);
      }
      if (QueueRevision.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(QueueRevision);
      }
      if (Position != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Position);
      }
      if (EntityUri.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(EntityUri);
      }
      reverse_.WriteTo(output, _repeated_reverse_codec);
      future_.WriteTo(output, _repeated_future_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (ContextUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextUri);
      }
      if (ContextUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContextUrl);
      }
      if (contextRestrictions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContextRestrictions);
      }
      if (playOrigin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayOrigin);
      }
      if (index_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Index);
      }
      if (track_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Track);
      }
      if (PlaybackId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PlaybackId);
      }
      if (PlaybackSpeed != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(PlaybackSpeed);
      }
      if (PositionAsOfTimestamp != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(PositionAsOfTimestamp);
      }
      if (Duration != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Duration);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPlaying);
      }
      if (IsPaused != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsPaused);
      }
      if (IsBuffering != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsBuffering);
      }
      if (IsSystemInitiated != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsSystemInitiated);
      }
      if (options_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Options);
      }
      if (restrictions_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Restrictions);
      }
      if (suppressions_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Suppressions);
      }
      prevTracks_.WriteTo(ref output, _repeated_prevTracks_codec);
      nextTracks_.WriteTo(ref output, _repeated_nextTracks_codec);
      contextMetadata_.WriteTo(ref output, _map_contextMetadata_codec);
      pageMetadata_.WriteTo(ref output, _map_pageMetadata_codec);
      if (SessionId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SessionId);
      }
      if (QueueRevision.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(QueueRevision);
      }
      if (Position != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(Position);
      }
      if (EntityUri.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(EntityUri);
      }
      reverse_.WriteTo(ref output, _repeated_reverse_codec);
      future_.WriteTo(ref output, _repeated_future_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (ContextUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextUri);
      }
      if (ContextUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextUrl);
      }
      if (contextRestrictions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContextRestrictions);
      }
      if (playOrigin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayOrigin);
      }
      if (index_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (track_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Track);
      }
      if (PlaybackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaybackId);
      }
      if (PlaybackSpeed != 0D) {
        size += 1 + 8;
      }
      if (PositionAsOfTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionAsOfTimestamp);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (IsPaused != false) {
        size += 1 + 1;
      }
      if (IsBuffering != false) {
        size += 1 + 1;
      }
      if (IsSystemInitiated != false) {
        size += 1 + 1;
      }
      if (options_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (restrictions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Restrictions);
      }
      if (suppressions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Suppressions);
      }
      size += prevTracks_.CalculateSize(_repeated_prevTracks_codec);
      size += nextTracks_.CalculateSize(_repeated_nextTracks_codec);
      size += contextMetadata_.CalculateSize(_map_contextMetadata_codec);
      size += pageMetadata_.CalculateSize(_map_pageMetadata_codec);
      if (SessionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (QueueRevision.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(QueueRevision);
      }
      if (Position != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (EntityUri.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EntityUri);
      }
      size += reverse_.CalculateSize(_repeated_reverse_codec);
      size += future_.CalculateSize(_repeated_future_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.ContextUri.Length != 0) {
        ContextUri = other.ContextUri;
      }
      if (other.ContextUrl.Length != 0) {
        ContextUrl = other.ContextUrl;
      }
      if (other.contextRestrictions_ != null) {
        if (contextRestrictions_ == null) {
          ContextRestrictions = new global::Connectstate.Restrictions();
        }
        ContextRestrictions.MergeFrom(other.ContextRestrictions);
      }
      if (other.playOrigin_ != null) {
        if (playOrigin_ == null) {
          PlayOrigin = new global::Connectstate.PlayOrigin();
        }
        PlayOrigin.MergeFrom(other.PlayOrigin);
      }
      if (other.index_ != null) {
        if (index_ == null) {
          Index = new global::Connectstate.ContextIndex();
        }
        Index.MergeFrom(other.Index);
      }
      if (other.track_ != null) {
        if (track_ == null) {
          Track = new global::Connectstate.ProvidedTrack();
        }
        Track.MergeFrom(other.Track);
      }
      if (other.PlaybackId.Length != 0) {
        PlaybackId = other.PlaybackId;
      }
      if (other.PlaybackSpeed != 0D) {
        PlaybackSpeed = other.PlaybackSpeed;
      }
      if (other.PositionAsOfTimestamp != 0L) {
        PositionAsOfTimestamp = other.PositionAsOfTimestamp;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.IsPlaying != false) {
        IsPlaying = other.IsPlaying;
      }
      if (other.IsPaused != false) {
        IsPaused = other.IsPaused;
      }
      if (other.IsBuffering != false) {
        IsBuffering = other.IsBuffering;
      }
      if (other.IsSystemInitiated != false) {
        IsSystemInitiated = other.IsSystemInitiated;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::Connectstate.ContextPlayerOptions();
        }
        Options.MergeFrom(other.Options);
      }
      if (other.restrictions_ != null) {
        if (restrictions_ == null) {
          Restrictions = new global::Connectstate.Restrictions();
        }
        Restrictions.MergeFrom(other.Restrictions);
      }
      if (other.suppressions_ != null) {
        if (suppressions_ == null) {
          Suppressions = new global::Connectstate.Suppressions();
        }
        Suppressions.MergeFrom(other.Suppressions);
      }
      prevTracks_.Add(other.prevTracks_);
      nextTracks_.Add(other.nextTracks_);
      contextMetadata_.Add(other.contextMetadata_);
      pageMetadata_.Add(other.pageMetadata_);
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.QueueRevision.Length != 0) {
        QueueRevision = other.QueueRevision;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.EntityUri.Length != 0) {
        EntityUri = other.EntityUri;
      }
      reverse_.Add(other.reverse_);
      future_.Add(other.future_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            ContextUri = input.ReadString();
            break;
          }
          case 26: {
            ContextUrl = input.ReadString();
            break;
          }
          case 34: {
            if (contextRestrictions_ == null) {
              ContextRestrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(ContextRestrictions);
            break;
          }
          case 42: {
            if (playOrigin_ == null) {
              PlayOrigin = new global::Connectstate.PlayOrigin();
            }
            input.ReadMessage(PlayOrigin);
            break;
          }
          case 50: {
            if (index_ == null) {
              Index = new global::Connectstate.ContextIndex();
            }
            input.ReadMessage(Index);
            break;
          }
          case 58: {
            if (track_ == null) {
              Track = new global::Connectstate.ProvidedTrack();
            }
            input.ReadMessage(Track);
            break;
          }
          case 66: {
            PlaybackId = input.ReadString();
            break;
          }
          case 73: {
            PlaybackSpeed = input.ReadDouble();
            break;
          }
          case 80: {
            PositionAsOfTimestamp = input.ReadInt64();
            break;
          }
          case 88: {
            Duration = input.ReadInt64();
            break;
          }
          case 96: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 104: {
            IsPaused = input.ReadBool();
            break;
          }
          case 112: {
            IsBuffering = input.ReadBool();
            break;
          }
          case 120: {
            IsSystemInitiated = input.ReadBool();
            break;
          }
          case 130: {
            if (options_ == null) {
              Options = new global::Connectstate.ContextPlayerOptions();
            }
            input.ReadMessage(Options);
            break;
          }
          case 138: {
            if (restrictions_ == null) {
              Restrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(Restrictions);
            break;
          }
          case 146: {
            if (suppressions_ == null) {
              Suppressions = new global::Connectstate.Suppressions();
            }
            input.ReadMessage(Suppressions);
            break;
          }
          case 154: {
            prevTracks_.AddEntriesFrom(input, _repeated_prevTracks_codec);
            break;
          }
          case 162: {
            nextTracks_.AddEntriesFrom(input, _repeated_nextTracks_codec);
            break;
          }
          case 170: {
            contextMetadata_.AddEntriesFrom(input, _map_contextMetadata_codec);
            break;
          }
          case 178: {
            pageMetadata_.AddEntriesFrom(input, _map_pageMetadata_codec);
            break;
          }
          case 186: {
            SessionId = input.ReadString();
            break;
          }
          case 194: {
            QueueRevision = input.ReadString();
            break;
          }
          case 200: {
            Position = input.ReadInt64();
            break;
          }
          case 210: {
            EntityUri = input.ReadString();
            break;
          }
          case 218: {
            reverse_.AddEntriesFrom(input, _repeated_reverse_codec);
            break;
          }
          case 226: {
            future_.AddEntriesFrom(input, _repeated_future_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            ContextUri = input.ReadString();
            break;
          }
          case 26: {
            ContextUrl = input.ReadString();
            break;
          }
          case 34: {
            if (contextRestrictions_ == null) {
              ContextRestrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(ContextRestrictions);
            break;
          }
          case 42: {
            if (playOrigin_ == null) {
              PlayOrigin = new global::Connectstate.PlayOrigin();
            }
            input.ReadMessage(PlayOrigin);
            break;
          }
          case 50: {
            if (index_ == null) {
              Index = new global::Connectstate.ContextIndex();
            }
            input.ReadMessage(Index);
            break;
          }
          case 58: {
            if (track_ == null) {
              Track = new global::Connectstate.ProvidedTrack();
            }
            input.ReadMessage(Track);
            break;
          }
          case 66: {
            PlaybackId = input.ReadString();
            break;
          }
          case 73: {
            PlaybackSpeed = input.ReadDouble();
            break;
          }
          case 80: {
            PositionAsOfTimestamp = input.ReadInt64();
            break;
          }
          case 88: {
            Duration = input.ReadInt64();
            break;
          }
          case 96: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 104: {
            IsPaused = input.ReadBool();
            break;
          }
          case 112: {
            IsBuffering = input.ReadBool();
            break;
          }
          case 120: {
            IsSystemInitiated = input.ReadBool();
            break;
          }
          case 130: {
            if (options_ == null) {
              Options = new global::Connectstate.ContextPlayerOptions();
            }
            input.ReadMessage(Options);
            break;
          }
          case 138: {
            if (restrictions_ == null) {
              Restrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(Restrictions);
            break;
          }
          case 146: {
            if (suppressions_ == null) {
              Suppressions = new global::Connectstate.Suppressions();
            }
            input.ReadMessage(Suppressions);
            break;
          }
          case 154: {
            prevTracks_.AddEntriesFrom(ref input, _repeated_prevTracks_codec);
            break;
          }
          case 162: {
            nextTracks_.AddEntriesFrom(ref input, _repeated_nextTracks_codec);
            break;
          }
          case 170: {
            contextMetadata_.AddEntriesFrom(ref input, _map_contextMetadata_codec);
            break;
          }
          case 178: {
            pageMetadata_.AddEntriesFrom(ref input, _map_pageMetadata_codec);
            break;
          }
          case 186: {
            SessionId = input.ReadString();
            break;
          }
          case 194: {
            QueueRevision = input.ReadString();
            break;
          }
          case 200: {
            Position = input.ReadInt64();
            break;
          }
          case 210: {
            EntityUri = input.ReadString();
            break;
          }
          case 218: {
            reverse_.AddEntriesFrom(ref input, _repeated_reverse_codec);
            break;
          }
          case 226: {
            future_.AddEntriesFrom(ref input, _repeated_future_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProvidedTrack : pb::IMessage<ProvidedTrack>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProvidedTrack> _parser = new pb::MessageParser<ProvidedTrack>(() => new ProvidedTrack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProvidedTrack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProvidedTrack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProvidedTrack(ProvidedTrack other) : this() {
      uri_ = other.uri_;
      uid_ = other.uid_;
      metadata_ = other.metadata_.Clone();
      removed_ = other.removed_.Clone();
      blocked_ = other.blocked_.Clone();
      provider_ = other.provider_;
      restrictions_ = other.restrictions_ != null ? other.restrictions_.Clone() : null;
      albumUri_ = other.albumUri_;
      disallowReasons_ = other.disallowReasons_.Clone();
      artistUri_ = other.artistUri_;
      disallowUndecided_ = other.disallowUndecided_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProvidedTrack Clone() {
      return new ProvidedTrack(this);
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 1;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "removed" field.</summary>
    public const int RemovedFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_removed_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> removed_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Removed {
      get { return removed_; }
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_blocked_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> blocked_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Blocked {
      get { return blocked_; }
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 6;
    private string provider_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Provider {
      get { return provider_; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "restrictions" field.</summary>
    public const int RestrictionsFieldNumber = 7;
    private global::Connectstate.Restrictions restrictions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Connectstate.Restrictions Restrictions {
      get { return restrictions_; }
      set {
        restrictions_ = value;
      }
    }

    /// <summary>Field number for the "album_uri" field.</summary>
    public const int AlbumUriFieldNumber = 8;
    private string albumUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlbumUri {
      get { return albumUri_; }
      set {
        albumUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disallow_reasons" field.</summary>
    public const int DisallowReasonsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_disallowReasons_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> disallowReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowReasons {
      get { return disallowReasons_; }
    }

    /// <summary>Field number for the "artist_uri" field.</summary>
    public const int ArtistUriFieldNumber = 10;
    private string artistUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtistUri {
      get { return artistUri_; }
      set {
        artistUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disallow_undecided" field.</summary>
    public const int DisallowUndecidedFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_disallowUndecided_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> disallowUndecided_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowUndecided {
      get { return disallowUndecided_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProvidedTrack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProvidedTrack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      if (Uid != other.Uid) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if(!removed_.Equals(other.removed_)) return false;
      if(!blocked_.Equals(other.blocked_)) return false;
      if (Provider != other.Provider) return false;
      if (!object.Equals(Restrictions, other.Restrictions)) return false;
      if (AlbumUri != other.AlbumUri) return false;
      if(!disallowReasons_.Equals(other.disallowReasons_)) return false;
      if (ArtistUri != other.ArtistUri) return false;
      if(!disallowUndecided_.Equals(other.disallowUndecided_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      hash ^= Metadata.GetHashCode();
      hash ^= removed_.GetHashCode();
      hash ^= blocked_.GetHashCode();
      if (Provider.Length != 0) hash ^= Provider.GetHashCode();
      if (restrictions_ != null) hash ^= Restrictions.GetHashCode();
      if (AlbumUri.Length != 0) hash ^= AlbumUri.GetHashCode();
      hash ^= disallowReasons_.GetHashCode();
      if (ArtistUri.Length != 0) hash ^= ArtistUri.GetHashCode();
      hash ^= disallowUndecided_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      removed_.WriteTo(output, _repeated_removed_codec);
      blocked_.WriteTo(output, _repeated_blocked_codec);
      if (Provider.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Provider);
      }
      if (restrictions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Restrictions);
      }
      if (AlbumUri.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AlbumUri);
      }
      disallowReasons_.WriteTo(output, _repeated_disallowReasons_codec);
      if (ArtistUri.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ArtistUri);
      }
      disallowUndecided_.WriteTo(output, _repeated_disallowUndecided_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uri);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      metadata_.WriteTo(ref output, _map_metadata_codec);
      removed_.WriteTo(ref output, _repeated_removed_codec);
      blocked_.WriteTo(ref output, _repeated_blocked_codec);
      if (Provider.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Provider);
      }
      if (restrictions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Restrictions);
      }
      if (AlbumUri.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AlbumUri);
      }
      disallowReasons_.WriteTo(ref output, _repeated_disallowReasons_codec);
      if (ArtistUri.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ArtistUri);
      }
      disallowUndecided_.WriteTo(ref output, _repeated_disallowUndecided_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      size += removed_.CalculateSize(_repeated_removed_codec);
      size += blocked_.CalculateSize(_repeated_blocked_codec);
      if (Provider.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      if (restrictions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Restrictions);
      }
      if (AlbumUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlbumUri);
      }
      size += disallowReasons_.CalculateSize(_repeated_disallowReasons_codec);
      if (ArtistUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtistUri);
      }
      size += disallowUndecided_.CalculateSize(_repeated_disallowUndecided_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProvidedTrack other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      metadata_.Add(other.metadata_);
      removed_.Add(other.removed_);
      blocked_.Add(other.blocked_);
      if (other.Provider.Length != 0) {
        Provider = other.Provider;
      }
      if (other.restrictions_ != null) {
        if (restrictions_ == null) {
          Restrictions = new global::Connectstate.Restrictions();
        }
        Restrictions.MergeFrom(other.Restrictions);
      }
      if (other.AlbumUri.Length != 0) {
        AlbumUri = other.AlbumUri;
      }
      disallowReasons_.Add(other.disallowReasons_);
      if (other.ArtistUri.Length != 0) {
        ArtistUri = other.ArtistUri;
      }
      disallowUndecided_.Add(other.disallowUndecided_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 34: {
            removed_.AddEntriesFrom(input, _repeated_removed_codec);
            break;
          }
          case 42: {
            blocked_.AddEntriesFrom(input, _repeated_blocked_codec);
            break;
          }
          case 50: {
            Provider = input.ReadString();
            break;
          }
          case 58: {
            if (restrictions_ == null) {
              Restrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(Restrictions);
            break;
          }
          case 66: {
            AlbumUri = input.ReadString();
            break;
          }
          case 74: {
            disallowReasons_.AddEntriesFrom(input, _repeated_disallowReasons_codec);
            break;
          }
          case 82: {
            ArtistUri = input.ReadString();
            break;
          }
          case 90: {
            disallowUndecided_.AddEntriesFrom(input, _repeated_disallowUndecided_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uri = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(ref input, _map_metadata_codec);
            break;
          }
          case 34: {
            removed_.AddEntriesFrom(ref input, _repeated_removed_codec);
            break;
          }
          case 42: {
            blocked_.AddEntriesFrom(ref input, _repeated_blocked_codec);
            break;
          }
          case 50: {
            Provider = input.ReadString();
            break;
          }
          case 58: {
            if (restrictions_ == null) {
              Restrictions = new global::Connectstate.Restrictions();
            }
            input.ReadMessage(Restrictions);
            break;
          }
          case 66: {
            AlbumUri = input.ReadString();
            break;
          }
          case 74: {
            disallowReasons_.AddEntriesFrom(ref input, _repeated_disallowReasons_codec);
            break;
          }
          case 82: {
            ArtistUri = input.ReadString();
            break;
          }
          case 90: {
            disallowUndecided_.AddEntriesFrom(ref input, _repeated_disallowUndecided_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContextIndex : pb::IMessage<ContextIndex>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContextIndex> _parser = new pb::MessageParser<ContextIndex>(() => new ContextIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextIndex(ContextIndex other) : this() {
      page_ = other.page_;
      track_ = other.track_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextIndex Clone() {
      return new ContextIndex(this);
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "track" field.</summary>
    public const int TrackFieldNumber = 2;
    private uint track_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Track {
      get { return track_; }
      set {
        track_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      if (Track != other.Track) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      if (Track != 0) hash ^= Track.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Page);
      }
      if (Track != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Track);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Page);
      }
      if (Track != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Track);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (Track != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Track);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextIndex other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.Track != 0) {
        Track = other.Track;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Page = input.ReadUInt32();
            break;
          }
          case 16: {
            Track = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Page = input.ReadUInt32();
            break;
          }
          case 16: {
            Track = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Restrictions : pb::IMessage<Restrictions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Restrictions> _parser = new pb::MessageParser<Restrictions>(() => new Restrictions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Restrictions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restrictions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restrictions(Restrictions other) : this() {
      disallowPausingReasons_ = other.disallowPausingReasons_.Clone();
      disallowResumingReasons_ = other.disallowResumingReasons_.Clone();
      disallowSeekingReasons_ = other.disallowSeekingReasons_.Clone();
      disallowPeekingPrevReasons_ = other.disallowPeekingPrevReasons_.Clone();
      disallowPeekingNextReasons_ = other.disallowPeekingNextReasons_.Clone();
      disallowSkippingPrevReasons_ = other.disallowSkippingPrevReasons_.Clone();
      disallowSkippingNextReasons_ = other.disallowSkippingNextReasons_.Clone();
      disallowTogglingRepeatContextReasons_ = other.disallowTogglingRepeatContextReasons_.Clone();
      disallowTogglingRepeatTrackReasons_ = other.disallowTogglingRepeatTrackReasons_.Clone();
      disallowTogglingShuffleReasons_ = other.disallowTogglingShuffleReasons_.Clone();
      disallowSetQueueReasons_ = other.disallowSetQueueReasons_.Clone();
      disallowInterruptingPlaybackReasons_ = other.disallowInterruptingPlaybackReasons_.Clone();
      disallowTransferringPlaybackReasons_ = other.disallowTransferringPlaybackReasons_.Clone();
      disallowRemoteControlReasons_ = other.disallowRemoteControlReasons_.Clone();
      disallowInsertingIntoNextTracksReasons_ = other.disallowInsertingIntoNextTracksReasons_.Clone();
      disallowInsertingIntoContextTracksReasons_ = other.disallowInsertingIntoContextTracksReasons_.Clone();
      disallowReorderingInNextTracksReasons_ = other.disallowReorderingInNextTracksReasons_.Clone();
      disallowReorderingInContextTracksReasons_ = other.disallowReorderingInContextTracksReasons_.Clone();
      disallowRemovingFromNextTracksReasons_ = other.disallowRemovingFromNextTracksReasons_.Clone();
      disallowRemovingFromContextTracksReasons_ = other.disallowRemovingFromContextTracksReasons_.Clone();
      disallowUpdatingContextReasons_ = other.disallowUpdatingContextReasons_.Clone();
      disallowPlayingReasons_ = other.disallowPlayingReasons_.Clone();
      disallowStoppingReasons_ = other.disallowStoppingReasons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Restrictions Clone() {
      return new Restrictions(this);
    }

    /// <summary>Field number for the "disallow_pausing_reasons" field.</summary>
    public const int DisallowPausingReasonsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_disallowPausingReasons_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> disallowPausingReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowPausingReasons {
      get { return disallowPausingReasons_; }
    }

    /// <summary>Field number for the "disallow_resuming_reasons" field.</summary>
    public const int DisallowResumingReasonsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_disallowResumingReasons_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> disallowResumingReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowResumingReasons {
      get { return disallowResumingReasons_; }
    }

    /// <summary>Field number for the "disallow_seeking_reasons" field.</summary>
    public const int DisallowSeekingReasonsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_disallowSeekingReasons_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> disallowSeekingReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowSeekingReasons {
      get { return disallowSeekingReasons_; }
    }

    /// <summary>Field number for the "disallow_peeking_prev_reasons" field.</summary>
    public const int DisallowPeekingPrevReasonsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_disallowPeekingPrevReasons_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> disallowPeekingPrevReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowPeekingPrevReasons {
      get { return disallowPeekingPrevReasons_; }
    }

    /// <summary>Field number for the "disallow_peeking_next_reasons" field.</summary>
    public const int DisallowPeekingNextReasonsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_disallowPeekingNextReasons_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> disallowPeekingNextReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowPeekingNextReasons {
      get { return disallowPeekingNextReasons_; }
    }

    /// <summary>Field number for the "disallow_skipping_prev_reasons" field.</summary>
    public const int DisallowSkippingPrevReasonsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_disallowSkippingPrevReasons_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> disallowSkippingPrevReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowSkippingPrevReasons {
      get { return disallowSkippingPrevReasons_; }
    }

    /// <summary>Field number for the "disallow_skipping_next_reasons" field.</summary>
    public const int DisallowSkippingNextReasonsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_disallowSkippingNextReasons_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> disallowSkippingNextReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowSkippingNextReasons {
      get { return disallowSkippingNextReasons_; }
    }

    /// <summary>Field number for the "disallow_toggling_repeat_context_reasons" field.</summary>
    public const int DisallowTogglingRepeatContextReasonsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_disallowTogglingRepeatContextReasons_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> disallowTogglingRepeatContextReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowTogglingRepeatContextReasons {
      get { return disallowTogglingRepeatContextReasons_; }
    }

    /// <summary>Field number for the "disallow_toggling_repeat_track_reasons" field.</summary>
    public const int DisallowTogglingRepeatTrackReasonsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_disallowTogglingRepeatTrackReasons_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> disallowTogglingRepeatTrackReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowTogglingRepeatTrackReasons {
      get { return disallowTogglingRepeatTrackReasons_; }
    }

    /// <summary>Field number for the "disallow_toggling_shuffle_reasons" field.</summary>
    public const int DisallowTogglingShuffleReasonsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_disallowTogglingShuffleReasons_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> disallowTogglingShuffleReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowTogglingShuffleReasons {
      get { return disallowTogglingShuffleReasons_; }
    }

    /// <summary>Field number for the "disallow_set_queue_reasons" field.</summary>
    public const int DisallowSetQueueReasonsFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_disallowSetQueueReasons_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> disallowSetQueueReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowSetQueueReasons {
      get { return disallowSetQueueReasons_; }
    }

    /// <summary>Field number for the "disallow_interrupting_playback_reasons" field.</summary>
    public const int DisallowInterruptingPlaybackReasonsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_disallowInterruptingPlaybackReasons_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> disallowInterruptingPlaybackReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowInterruptingPlaybackReasons {
      get { return disallowInterruptingPlaybackReasons_; }
    }

    /// <summary>Field number for the "disallow_transferring_playback_reasons" field.</summary>
    public const int DisallowTransferringPlaybackReasonsFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_disallowTransferringPlaybackReasons_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> disallowTransferringPlaybackReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowTransferringPlaybackReasons {
      get { return disallowTransferringPlaybackReasons_; }
    }

    /// <summary>Field number for the "disallow_remote_control_reasons" field.</summary>
    public const int DisallowRemoteControlReasonsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_disallowRemoteControlReasons_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> disallowRemoteControlReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowRemoteControlReasons {
      get { return disallowRemoteControlReasons_; }
    }

    /// <summary>Field number for the "disallow_inserting_into_next_tracks_reasons" field.</summary>
    public const int DisallowInsertingIntoNextTracksReasonsFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_disallowInsertingIntoNextTracksReasons_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> disallowInsertingIntoNextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowInsertingIntoNextTracksReasons {
      get { return disallowInsertingIntoNextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_inserting_into_context_tracks_reasons" field.</summary>
    public const int DisallowInsertingIntoContextTracksReasonsFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_disallowInsertingIntoContextTracksReasons_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> disallowInsertingIntoContextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowInsertingIntoContextTracksReasons {
      get { return disallowInsertingIntoContextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_reordering_in_next_tracks_reasons" field.</summary>
    public const int DisallowReorderingInNextTracksReasonsFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_disallowReorderingInNextTracksReasons_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> disallowReorderingInNextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowReorderingInNextTracksReasons {
      get { return disallowReorderingInNextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_reordering_in_context_tracks_reasons" field.</summary>
    public const int DisallowReorderingInContextTracksReasonsFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_disallowReorderingInContextTracksReasons_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> disallowReorderingInContextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowReorderingInContextTracksReasons {
      get { return disallowReorderingInContextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_removing_from_next_tracks_reasons" field.</summary>
    public const int DisallowRemovingFromNextTracksReasonsFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _repeated_disallowRemovingFromNextTracksReasons_codec
        = pb::FieldCodec.ForString(154);
    private readonly pbc::RepeatedField<string> disallowRemovingFromNextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowRemovingFromNextTracksReasons {
      get { return disallowRemovingFromNextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_removing_from_context_tracks_reasons" field.</summary>
    public const int DisallowRemovingFromContextTracksReasonsFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_disallowRemovingFromContextTracksReasons_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> disallowRemovingFromContextTracksReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowRemovingFromContextTracksReasons {
      get { return disallowRemovingFromContextTracksReasons_; }
    }

    /// <summary>Field number for the "disallow_updating_context_reasons" field.</summary>
    public const int DisallowUpdatingContextReasonsFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_disallowUpdatingContextReasons_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> disallowUpdatingContextReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowUpdatingContextReasons {
      get { return disallowUpdatingContextReasons_; }
    }

    /// <summary>Field number for the "disallow_playing_reasons" field.</summary>
    public const int DisallowPlayingReasonsFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _repeated_disallowPlayingReasons_codec
        = pb::FieldCodec.ForString(178);
    private readonly pbc::RepeatedField<string> disallowPlayingReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowPlayingReasons {
      get { return disallowPlayingReasons_; }
    }

    /// <summary>Field number for the "disallow_stopping_reasons" field.</summary>
    public const int DisallowStoppingReasonsFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _repeated_disallowStoppingReasons_codec
        = pb::FieldCodec.ForString(186);
    private readonly pbc::RepeatedField<string> disallowStoppingReasons_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DisallowStoppingReasons {
      get { return disallowStoppingReasons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Restrictions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Restrictions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!disallowPausingReasons_.Equals(other.disallowPausingReasons_)) return false;
      if(!disallowResumingReasons_.Equals(other.disallowResumingReasons_)) return false;
      if(!disallowSeekingReasons_.Equals(other.disallowSeekingReasons_)) return false;
      if(!disallowPeekingPrevReasons_.Equals(other.disallowPeekingPrevReasons_)) return false;
      if(!disallowPeekingNextReasons_.Equals(other.disallowPeekingNextReasons_)) return false;
      if(!disallowSkippingPrevReasons_.Equals(other.disallowSkippingPrevReasons_)) return false;
      if(!disallowSkippingNextReasons_.Equals(other.disallowSkippingNextReasons_)) return false;
      if(!disallowTogglingRepeatContextReasons_.Equals(other.disallowTogglingRepeatContextReasons_)) return false;
      if(!disallowTogglingRepeatTrackReasons_.Equals(other.disallowTogglingRepeatTrackReasons_)) return false;
      if(!disallowTogglingShuffleReasons_.Equals(other.disallowTogglingShuffleReasons_)) return false;
      if(!disallowSetQueueReasons_.Equals(other.disallowSetQueueReasons_)) return false;
      if(!disallowInterruptingPlaybackReasons_.Equals(other.disallowInterruptingPlaybackReasons_)) return false;
      if(!disallowTransferringPlaybackReasons_.Equals(other.disallowTransferringPlaybackReasons_)) return false;
      if(!disallowRemoteControlReasons_.Equals(other.disallowRemoteControlReasons_)) return false;
      if(!disallowInsertingIntoNextTracksReasons_.Equals(other.disallowInsertingIntoNextTracksReasons_)) return false;
      if(!disallowInsertingIntoContextTracksReasons_.Equals(other.disallowInsertingIntoContextTracksReasons_)) return false;
      if(!disallowReorderingInNextTracksReasons_.Equals(other.disallowReorderingInNextTracksReasons_)) return false;
      if(!disallowReorderingInContextTracksReasons_.Equals(other.disallowReorderingInContextTracksReasons_)) return false;
      if(!disallowRemovingFromNextTracksReasons_.Equals(other.disallowRemovingFromNextTracksReasons_)) return false;
      if(!disallowRemovingFromContextTracksReasons_.Equals(other.disallowRemovingFromContextTracksReasons_)) return false;
      if(!disallowUpdatingContextReasons_.Equals(other.disallowUpdatingContextReasons_)) return false;
      if(!disallowPlayingReasons_.Equals(other.disallowPlayingReasons_)) return false;
      if(!disallowStoppingReasons_.Equals(other.disallowStoppingReasons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= disallowPausingReasons_.GetHashCode();
      hash ^= disallowResumingReasons_.GetHashCode();
      hash ^= disallowSeekingReasons_.GetHashCode();
      hash ^= disallowPeekingPrevReasons_.GetHashCode();
      hash ^= disallowPeekingNextReasons_.GetHashCode();
      hash ^= disallowSkippingPrevReasons_.GetHashCode();
      hash ^= disallowSkippingNextReasons_.GetHashCode();
      hash ^= disallowTogglingRepeatContextReasons_.GetHashCode();
      hash ^= disallowTogglingRepeatTrackReasons_.GetHashCode();
      hash ^= disallowTogglingShuffleReasons_.GetHashCode();
      hash ^= disallowSetQueueReasons_.GetHashCode();
      hash ^= disallowInterruptingPlaybackReasons_.GetHashCode();
      hash ^= disallowTransferringPlaybackReasons_.GetHashCode();
      hash ^= disallowRemoteControlReasons_.GetHashCode();
      hash ^= disallowInsertingIntoNextTracksReasons_.GetHashCode();
      hash ^= disallowInsertingIntoContextTracksReasons_.GetHashCode();
      hash ^= disallowReorderingInNextTracksReasons_.GetHashCode();
      hash ^= disallowReorderingInContextTracksReasons_.GetHashCode();
      hash ^= disallowRemovingFromNextTracksReasons_.GetHashCode();
      hash ^= disallowRemovingFromContextTracksReasons_.GetHashCode();
      hash ^= disallowUpdatingContextReasons_.GetHashCode();
      hash ^= disallowPlayingReasons_.GetHashCode();
      hash ^= disallowStoppingReasons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      disallowPausingReasons_.WriteTo(output, _repeated_disallowPausingReasons_codec);
      disallowResumingReasons_.WriteTo(output, _repeated_disallowResumingReasons_codec);
      disallowSeekingReasons_.WriteTo(output, _repeated_disallowSeekingReasons_codec);
      disallowPeekingPrevReasons_.WriteTo(output, _repeated_disallowPeekingPrevReasons_codec);
      disallowPeekingNextReasons_.WriteTo(output, _repeated_disallowPeekingNextReasons_codec);
      disallowSkippingPrevReasons_.WriteTo(output, _repeated_disallowSkippingPrevReasons_codec);
      disallowSkippingNextReasons_.WriteTo(output, _repeated_disallowSkippingNextReasons_codec);
      disallowTogglingRepeatContextReasons_.WriteTo(output, _repeated_disallowTogglingRepeatContextReasons_codec);
      disallowTogglingRepeatTrackReasons_.WriteTo(output, _repeated_disallowTogglingRepeatTrackReasons_codec);
      disallowTogglingShuffleReasons_.WriteTo(output, _repeated_disallowTogglingShuffleReasons_codec);
      disallowSetQueueReasons_.WriteTo(output, _repeated_disallowSetQueueReasons_codec);
      disallowInterruptingPlaybackReasons_.WriteTo(output, _repeated_disallowInterruptingPlaybackReasons_codec);
      disallowTransferringPlaybackReasons_.WriteTo(output, _repeated_disallowTransferringPlaybackReasons_codec);
      disallowRemoteControlReasons_.WriteTo(output, _repeated_disallowRemoteControlReasons_codec);
      disallowInsertingIntoNextTracksReasons_.WriteTo(output, _repeated_disallowInsertingIntoNextTracksReasons_codec);
      disallowInsertingIntoContextTracksReasons_.WriteTo(output, _repeated_disallowInsertingIntoContextTracksReasons_codec);
      disallowReorderingInNextTracksReasons_.WriteTo(output, _repeated_disallowReorderingInNextTracksReasons_codec);
      disallowReorderingInContextTracksReasons_.WriteTo(output, _repeated_disallowReorderingInContextTracksReasons_codec);
      disallowRemovingFromNextTracksReasons_.WriteTo(output, _repeated_disallowRemovingFromNextTracksReasons_codec);
      disallowRemovingFromContextTracksReasons_.WriteTo(output, _repeated_disallowRemovingFromContextTracksReasons_codec);
      disallowUpdatingContextReasons_.WriteTo(output, _repeated_disallowUpdatingContextReasons_codec);
      disallowPlayingReasons_.WriteTo(output, _repeated_disallowPlayingReasons_codec);
      disallowStoppingReasons_.WriteTo(output, _repeated_disallowStoppingReasons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      disallowPausingReasons_.WriteTo(ref output, _repeated_disallowPausingReasons_codec);
      disallowResumingReasons_.WriteTo(ref output, _repeated_disallowResumingReasons_codec);
      disallowSeekingReasons_.WriteTo(ref output, _repeated_disallowSeekingReasons_codec);
      disallowPeekingPrevReasons_.WriteTo(ref output, _repeated_disallowPeekingPrevReasons_codec);
      disallowPeekingNextReasons_.WriteTo(ref output, _repeated_disallowPeekingNextReasons_codec);
      disallowSkippingPrevReasons_.WriteTo(ref output, _repeated_disallowSkippingPrevReasons_codec);
      disallowSkippingNextReasons_.WriteTo(ref output, _repeated_disallowSkippingNextReasons_codec);
      disallowTogglingRepeatContextReasons_.WriteTo(ref output, _repeated_disallowTogglingRepeatContextReasons_codec);
      disallowTogglingRepeatTrackReasons_.WriteTo(ref output, _repeated_disallowTogglingRepeatTrackReasons_codec);
      disallowTogglingShuffleReasons_.WriteTo(ref output, _repeated_disallowTogglingShuffleReasons_codec);
      disallowSetQueueReasons_.WriteTo(ref output, _repeated_disallowSetQueueReasons_codec);
      disallowInterruptingPlaybackReasons_.WriteTo(ref output, _repeated_disallowInterruptingPlaybackReasons_codec);
      disallowTransferringPlaybackReasons_.WriteTo(ref output, _repeated_disallowTransferringPlaybackReasons_codec);
      disallowRemoteControlReasons_.WriteTo(ref output, _repeated_disallowRemoteControlReasons_codec);
      disallowInsertingIntoNextTracksReasons_.WriteTo(ref output, _repeated_disallowInsertingIntoNextTracksReasons_codec);
      disallowInsertingIntoContextTracksReasons_.WriteTo(ref output, _repeated_disallowInsertingIntoContextTracksReasons_codec);
      disallowReorderingInNextTracksReasons_.WriteTo(ref output, _repeated_disallowReorderingInNextTracksReasons_codec);
      disallowReorderingInContextTracksReasons_.WriteTo(ref output, _repeated_disallowReorderingInContextTracksReasons_codec);
      disallowRemovingFromNextTracksReasons_.WriteTo(ref output, _repeated_disallowRemovingFromNextTracksReasons_codec);
      disallowRemovingFromContextTracksReasons_.WriteTo(ref output, _repeated_disallowRemovingFromContextTracksReasons_codec);
      disallowUpdatingContextReasons_.WriteTo(ref output, _repeated_disallowUpdatingContextReasons_codec);
      disallowPlayingReasons_.WriteTo(ref output, _repeated_disallowPlayingReasons_codec);
      disallowStoppingReasons_.WriteTo(ref output, _repeated_disallowStoppingReasons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += disallowPausingReasons_.CalculateSize(_repeated_disallowPausingReasons_codec);
      size += disallowResumingReasons_.CalculateSize(_repeated_disallowResumingReasons_codec);
      size += disallowSeekingReasons_.CalculateSize(_repeated_disallowSeekingReasons_codec);
      size += disallowPeekingPrevReasons_.CalculateSize(_repeated_disallowPeekingPrevReasons_codec);
      size += disallowPeekingNextReasons_.CalculateSize(_repeated_disallowPeekingNextReasons_codec);
      size += disallowSkippingPrevReasons_.CalculateSize(_repeated_disallowSkippingPrevReasons_codec);
      size += disallowSkippingNextReasons_.CalculateSize(_repeated_disallowSkippingNextReasons_codec);
      size += disallowTogglingRepeatContextReasons_.CalculateSize(_repeated_disallowTogglingRepeatContextReasons_codec);
      size += disallowTogglingRepeatTrackReasons_.CalculateSize(_repeated_disallowTogglingRepeatTrackReasons_codec);
      size += disallowTogglingShuffleReasons_.CalculateSize(_repeated_disallowTogglingShuffleReasons_codec);
      size += disallowSetQueueReasons_.CalculateSize(_repeated_disallowSetQueueReasons_codec);
      size += disallowInterruptingPlaybackReasons_.CalculateSize(_repeated_disallowInterruptingPlaybackReasons_codec);
      size += disallowTransferringPlaybackReasons_.CalculateSize(_repeated_disallowTransferringPlaybackReasons_codec);
      size += disallowRemoteControlReasons_.CalculateSize(_repeated_disallowRemoteControlReasons_codec);
      size += disallowInsertingIntoNextTracksReasons_.CalculateSize(_repeated_disallowInsertingIntoNextTracksReasons_codec);
      size += disallowInsertingIntoContextTracksReasons_.CalculateSize(_repeated_disallowInsertingIntoContextTracksReasons_codec);
      size += disallowReorderingInNextTracksReasons_.CalculateSize(_repeated_disallowReorderingInNextTracksReasons_codec);
      size += disallowReorderingInContextTracksReasons_.CalculateSize(_repeated_disallowReorderingInContextTracksReasons_codec);
      size += disallowRemovingFromNextTracksReasons_.CalculateSize(_repeated_disallowRemovingFromNextTracksReasons_codec);
      size += disallowRemovingFromContextTracksReasons_.CalculateSize(_repeated_disallowRemovingFromContextTracksReasons_codec);
      size += disallowUpdatingContextReasons_.CalculateSize(_repeated_disallowUpdatingContextReasons_codec);
      size += disallowPlayingReasons_.CalculateSize(_repeated_disallowPlayingReasons_codec);
      size += disallowStoppingReasons_.CalculateSize(_repeated_disallowStoppingReasons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Restrictions other) {
      if (other == null) {
        return;
      }
      disallowPausingReasons_.Add(other.disallowPausingReasons_);
      disallowResumingReasons_.Add(other.disallowResumingReasons_);
      disallowSeekingReasons_.Add(other.disallowSeekingReasons_);
      disallowPeekingPrevReasons_.Add(other.disallowPeekingPrevReasons_);
      disallowPeekingNextReasons_.Add(other.disallowPeekingNextReasons_);
      disallowSkippingPrevReasons_.Add(other.disallowSkippingPrevReasons_);
      disallowSkippingNextReasons_.Add(other.disallowSkippingNextReasons_);
      disallowTogglingRepeatContextReasons_.Add(other.disallowTogglingRepeatContextReasons_);
      disallowTogglingRepeatTrackReasons_.Add(other.disallowTogglingRepeatTrackReasons_);
      disallowTogglingShuffleReasons_.Add(other.disallowTogglingShuffleReasons_);
      disallowSetQueueReasons_.Add(other.disallowSetQueueReasons_);
      disallowInterruptingPlaybackReasons_.Add(other.disallowInterruptingPlaybackReasons_);
      disallowTransferringPlaybackReasons_.Add(other.disallowTransferringPlaybackReasons_);
      disallowRemoteControlReasons_.Add(other.disallowRemoteControlReasons_);
      disallowInsertingIntoNextTracksReasons_.Add(other.disallowInsertingIntoNextTracksReasons_);
      disallowInsertingIntoContextTracksReasons_.Add(other.disallowInsertingIntoContextTracksReasons_);
      disallowReorderingInNextTracksReasons_.Add(other.disallowReorderingInNextTracksReasons_);
      disallowReorderingInContextTracksReasons_.Add(other.disallowReorderingInContextTracksReasons_);
      disallowRemovingFromNextTracksReasons_.Add(other.disallowRemovingFromNextTracksReasons_);
      disallowRemovingFromContextTracksReasons_.Add(other.disallowRemovingFromContextTracksReasons_);
      disallowUpdatingContextReasons_.Add(other.disallowUpdatingContextReasons_);
      disallowPlayingReasons_.Add(other.disallowPlayingReasons_);
      disallowStoppingReasons_.Add(other.disallowStoppingReasons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            disallowPausingReasons_.AddEntriesFrom(input, _repeated_disallowPausingReasons_codec);
            break;
          }
          case 18: {
            disallowResumingReasons_.AddEntriesFrom(input, _repeated_disallowResumingReasons_codec);
            break;
          }
          case 26: {
            disallowSeekingReasons_.AddEntriesFrom(input, _repeated_disallowSeekingReasons_codec);
            break;
          }
          case 34: {
            disallowPeekingPrevReasons_.AddEntriesFrom(input, _repeated_disallowPeekingPrevReasons_codec);
            break;
          }
          case 42: {
            disallowPeekingNextReasons_.AddEntriesFrom(input, _repeated_disallowPeekingNextReasons_codec);
            break;
          }
          case 50: {
            disallowSkippingPrevReasons_.AddEntriesFrom(input, _repeated_disallowSkippingPrevReasons_codec);
            break;
          }
          case 58: {
            disallowSkippingNextReasons_.AddEntriesFrom(input, _repeated_disallowSkippingNextReasons_codec);
            break;
          }
          case 66: {
            disallowTogglingRepeatContextReasons_.AddEntriesFrom(input, _repeated_disallowTogglingRepeatContextReasons_codec);
            break;
          }
          case 74: {
            disallowTogglingRepeatTrackReasons_.AddEntriesFrom(input, _repeated_disallowTogglingRepeatTrackReasons_codec);
            break;
          }
          case 82: {
            disallowTogglingShuffleReasons_.AddEntriesFrom(input, _repeated_disallowTogglingShuffleReasons_codec);
            break;
          }
          case 90: {
            disallowSetQueueReasons_.AddEntriesFrom(input, _repeated_disallowSetQueueReasons_codec);
            break;
          }
          case 98: {
            disallowInterruptingPlaybackReasons_.AddEntriesFrom(input, _repeated_disallowInterruptingPlaybackReasons_codec);
            break;
          }
          case 106: {
            disallowTransferringPlaybackReasons_.AddEntriesFrom(input, _repeated_disallowTransferringPlaybackReasons_codec);
            break;
          }
          case 114: {
            disallowRemoteControlReasons_.AddEntriesFrom(input, _repeated_disallowRemoteControlReasons_codec);
            break;
          }
          case 122: {
            disallowInsertingIntoNextTracksReasons_.AddEntriesFrom(input, _repeated_disallowInsertingIntoNextTracksReasons_codec);
            break;
          }
          case 130: {
            disallowInsertingIntoContextTracksReasons_.AddEntriesFrom(input, _repeated_disallowInsertingIntoContextTracksReasons_codec);
            break;
          }
          case 138: {
            disallowReorderingInNextTracksReasons_.AddEntriesFrom(input, _repeated_disallowReorderingInNextTracksReasons_codec);
            break;
          }
          case 146: {
            disallowReorderingInContextTracksReasons_.AddEntriesFrom(input, _repeated_disallowReorderingInContextTracksReasons_codec);
            break;
          }
          case 154: {
            disallowRemovingFromNextTracksReasons_.AddEntriesFrom(input, _repeated_disallowRemovingFromNextTracksReasons_codec);
            break;
          }
          case 162: {
            disallowRemovingFromContextTracksReasons_.AddEntriesFrom(input, _repeated_disallowRemovingFromContextTracksReasons_codec);
            break;
          }
          case 170: {
            disallowUpdatingContextReasons_.AddEntriesFrom(input, _repeated_disallowUpdatingContextReasons_codec);
            break;
          }
          case 178: {
            disallowPlayingReasons_.AddEntriesFrom(input, _repeated_disallowPlayingReasons_codec);
            break;
          }
          case 186: {
            disallowStoppingReasons_.AddEntriesFrom(input, _repeated_disallowStoppingReasons_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            disallowPausingReasons_.AddEntriesFrom(ref input, _repeated_disallowPausingReasons_codec);
            break;
          }
          case 18: {
            disallowResumingReasons_.AddEntriesFrom(ref input, _repeated_disallowResumingReasons_codec);
            break;
          }
          case 26: {
            disallowSeekingReasons_.AddEntriesFrom(ref input, _repeated_disallowSeekingReasons_codec);
            break;
          }
          case 34: {
            disallowPeekingPrevReasons_.AddEntriesFrom(ref input, _repeated_disallowPeekingPrevReasons_codec);
            break;
          }
          case 42: {
            disallowPeekingNextReasons_.AddEntriesFrom(ref input, _repeated_disallowPeekingNextReasons_codec);
            break;
          }
          case 50: {
            disallowSkippingPrevReasons_.AddEntriesFrom(ref input, _repeated_disallowSkippingPrevReasons_codec);
            break;
          }
          case 58: {
            disallowSkippingNextReasons_.AddEntriesFrom(ref input, _repeated_disallowSkippingNextReasons_codec);
            break;
          }
          case 66: {
            disallowTogglingRepeatContextReasons_.AddEntriesFrom(ref input, _repeated_disallowTogglingRepeatContextReasons_codec);
            break;
          }
          case 74: {
            disallowTogglingRepeatTrackReasons_.AddEntriesFrom(ref input, _repeated_disallowTogglingRepeatTrackReasons_codec);
            break;
          }
          case 82: {
            disallowTogglingShuffleReasons_.AddEntriesFrom(ref input, _repeated_disallowTogglingShuffleReasons_codec);
            break;
          }
          case 90: {
            disallowSetQueueReasons_.AddEntriesFrom(ref input, _repeated_disallowSetQueueReasons_codec);
            break;
          }
          case 98: {
            disallowInterruptingPlaybackReasons_.AddEntriesFrom(ref input, _repeated_disallowInterruptingPlaybackReasons_codec);
            break;
          }
          case 106: {
            disallowTransferringPlaybackReasons_.AddEntriesFrom(ref input, _repeated_disallowTransferringPlaybackReasons_codec);
            break;
          }
          case 114: {
            disallowRemoteControlReasons_.AddEntriesFrom(ref input, _repeated_disallowRemoteControlReasons_codec);
            break;
          }
          case 122: {
            disallowInsertingIntoNextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowInsertingIntoNextTracksReasons_codec);
            break;
          }
          case 130: {
            disallowInsertingIntoContextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowInsertingIntoContextTracksReasons_codec);
            break;
          }
          case 138: {
            disallowReorderingInNextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowReorderingInNextTracksReasons_codec);
            break;
          }
          case 146: {
            disallowReorderingInContextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowReorderingInContextTracksReasons_codec);
            break;
          }
          case 154: {
            disallowRemovingFromNextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowRemovingFromNextTracksReasons_codec);
            break;
          }
          case 162: {
            disallowRemovingFromContextTracksReasons_.AddEntriesFrom(ref input, _repeated_disallowRemovingFromContextTracksReasons_codec);
            break;
          }
          case 170: {
            disallowUpdatingContextReasons_.AddEntriesFrom(ref input, _repeated_disallowUpdatingContextReasons_codec);
            break;
          }
          case 178: {
            disallowPlayingReasons_.AddEntriesFrom(ref input, _repeated_disallowPlayingReasons_codec);
            break;
          }
          case 186: {
            disallowStoppingReasons_.AddEntriesFrom(ref input, _repeated_disallowStoppingReasons_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayOrigin : pb::IMessage<PlayOrigin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayOrigin> _parser = new pb::MessageParser<PlayOrigin>(() => new PlayOrigin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayOrigin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayOrigin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayOrigin(PlayOrigin other) : this() {
      featureIdentifier_ = other.featureIdentifier_;
      featureVersion_ = other.featureVersion_;
      viewUri_ = other.viewUri_;
      externalReferrer_ = other.externalReferrer_;
      referrerIdentifier_ = other.referrerIdentifier_;
      deviceIdentifier_ = other.deviceIdentifier_;
      featureClasses_ = other.featureClasses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayOrigin Clone() {
      return new PlayOrigin(this);
    }

    /// <summary>Field number for the "feature_identifier" field.</summary>
    public const int FeatureIdentifierFieldNumber = 1;
    private string featureIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureIdentifier {
      get { return featureIdentifier_; }
      set {
        featureIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_version" field.</summary>
    public const int FeatureVersionFieldNumber = 2;
    private string featureVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureVersion {
      get { return featureVersion_; }
      set {
        featureVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_uri" field.</summary>
    public const int ViewUriFieldNumber = 3;
    private string viewUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViewUri {
      get { return viewUri_; }
      set {
        viewUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_referrer" field.</summary>
    public const int ExternalReferrerFieldNumber = 4;
    private string externalReferrer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalReferrer {
      get { return externalReferrer_; }
      set {
        externalReferrer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referrer_identifier" field.</summary>
    public const int ReferrerIdentifierFieldNumber = 5;
    private string referrerIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferrerIdentifier {
      get { return referrerIdentifier_; }
      set {
        referrerIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_identifier" field.</summary>
    public const int DeviceIdentifierFieldNumber = 6;
    private string deviceIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceIdentifier {
      get { return deviceIdentifier_; }
      set {
        deviceIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_classes" field.</summary>
    public const int FeatureClassesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_featureClasses_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> featureClasses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FeatureClasses {
      get { return featureClasses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayOrigin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayOrigin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureIdentifier != other.FeatureIdentifier) return false;
      if (FeatureVersion != other.FeatureVersion) return false;
      if (ViewUri != other.ViewUri) return false;
      if (ExternalReferrer != other.ExternalReferrer) return false;
      if (ReferrerIdentifier != other.ReferrerIdentifier) return false;
      if (DeviceIdentifier != other.DeviceIdentifier) return false;
      if(!featureClasses_.Equals(other.featureClasses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeatureIdentifier.Length != 0) hash ^= FeatureIdentifier.GetHashCode();
      if (FeatureVersion.Length != 0) hash ^= FeatureVersion.GetHashCode();
      if (ViewUri.Length != 0) hash ^= ViewUri.GetHashCode();
      if (ExternalReferrer.Length != 0) hash ^= ExternalReferrer.GetHashCode();
      if (ReferrerIdentifier.Length != 0) hash ^= ReferrerIdentifier.GetHashCode();
      if (DeviceIdentifier.Length != 0) hash ^= DeviceIdentifier.GetHashCode();
      hash ^= featureClasses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FeatureIdentifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureIdentifier);
      }
      if (FeatureVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeatureVersion);
      }
      if (ViewUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ViewUri);
      }
      if (ExternalReferrer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExternalReferrer);
      }
      if (ReferrerIdentifier.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReferrerIdentifier);
      }
      if (DeviceIdentifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceIdentifier);
      }
      featureClasses_.WriteTo(output, _repeated_featureClasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FeatureIdentifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureIdentifier);
      }
      if (FeatureVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeatureVersion);
      }
      if (ViewUri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ViewUri);
      }
      if (ExternalReferrer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExternalReferrer);
      }
      if (ReferrerIdentifier.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReferrerIdentifier);
      }
      if (DeviceIdentifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceIdentifier);
      }
      featureClasses_.WriteTo(ref output, _repeated_featureClasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeatureIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureIdentifier);
      }
      if (FeatureVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureVersion);
      }
      if (ViewUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewUri);
      }
      if (ExternalReferrer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalReferrer);
      }
      if (ReferrerIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferrerIdentifier);
      }
      if (DeviceIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIdentifier);
      }
      size += featureClasses_.CalculateSize(_repeated_featureClasses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayOrigin other) {
      if (other == null) {
        return;
      }
      if (other.FeatureIdentifier.Length != 0) {
        FeatureIdentifier = other.FeatureIdentifier;
      }
      if (other.FeatureVersion.Length != 0) {
        FeatureVersion = other.FeatureVersion;
      }
      if (other.ViewUri.Length != 0) {
        ViewUri = other.ViewUri;
      }
      if (other.ExternalReferrer.Length != 0) {
        ExternalReferrer = other.ExternalReferrer;
      }
      if (other.ReferrerIdentifier.Length != 0) {
        ReferrerIdentifier = other.ReferrerIdentifier;
      }
      if (other.DeviceIdentifier.Length != 0) {
        DeviceIdentifier = other.DeviceIdentifier;
      }
      featureClasses_.Add(other.featureClasses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FeatureIdentifier = input.ReadString();
            break;
          }
          case 18: {
            FeatureVersion = input.ReadString();
            break;
          }
          case 26: {
            ViewUri = input.ReadString();
            break;
          }
          case 34: {
            ExternalReferrer = input.ReadString();
            break;
          }
          case 42: {
            ReferrerIdentifier = input.ReadString();
            break;
          }
          case 50: {
            DeviceIdentifier = input.ReadString();
            break;
          }
          case 58: {
            featureClasses_.AddEntriesFrom(input, _repeated_featureClasses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FeatureIdentifier = input.ReadString();
            break;
          }
          case 18: {
            FeatureVersion = input.ReadString();
            break;
          }
          case 26: {
            ViewUri = input.ReadString();
            break;
          }
          case 34: {
            ExternalReferrer = input.ReadString();
            break;
          }
          case 42: {
            ReferrerIdentifier = input.ReadString();
            break;
          }
          case 50: {
            DeviceIdentifier = input.ReadString();
            break;
          }
          case 58: {
            featureClasses_.AddEntriesFrom(ref input, _repeated_featureClasses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContextPlayerOptions : pb::IMessage<ContextPlayerOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContextPlayerOptions> _parser = new pb::MessageParser<ContextPlayerOptions>(() => new ContextPlayerOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextPlayerOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextPlayerOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextPlayerOptions(ContextPlayerOptions other) : this() {
      shufflingContext_ = other.shufflingContext_;
      repeatingContext_ = other.repeatingContext_;
      repeatingTrack_ = other.repeatingTrack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextPlayerOptions Clone() {
      return new ContextPlayerOptions(this);
    }

    /// <summary>Field number for the "shuffling_context" field.</summary>
    public const int ShufflingContextFieldNumber = 1;
    private bool shufflingContext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShufflingContext {
      get { return shufflingContext_; }
      set {
        shufflingContext_ = value;
      }
    }

    /// <summary>Field number for the "repeating_context" field.</summary>
    public const int RepeatingContextFieldNumber = 2;
    private bool repeatingContext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RepeatingContext {
      get { return repeatingContext_; }
      set {
        repeatingContext_ = value;
      }
    }

    /// <summary>Field number for the "repeating_track" field.</summary>
    public const int RepeatingTrackFieldNumber = 3;
    private bool repeatingTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RepeatingTrack {
      get { return repeatingTrack_; }
      set {
        repeatingTrack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextPlayerOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextPlayerOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShufflingContext != other.ShufflingContext) return false;
      if (RepeatingContext != other.RepeatingContext) return false;
      if (RepeatingTrack != other.RepeatingTrack) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShufflingContext != false) hash ^= ShufflingContext.GetHashCode();
      if (RepeatingContext != false) hash ^= RepeatingContext.GetHashCode();
      if (RepeatingTrack != false) hash ^= RepeatingTrack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ShufflingContext != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShufflingContext);
      }
      if (RepeatingContext != false) {
        output.WriteRawTag(16);
        output.WriteBool(RepeatingContext);
      }
      if (RepeatingTrack != false) {
        output.WriteRawTag(24);
        output.WriteBool(RepeatingTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ShufflingContext != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShufflingContext);
      }
      if (RepeatingContext != false) {
        output.WriteRawTag(16);
        output.WriteBool(RepeatingContext);
      }
      if (RepeatingTrack != false) {
        output.WriteRawTag(24);
        output.WriteBool(RepeatingTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShufflingContext != false) {
        size += 1 + 1;
      }
      if (RepeatingContext != false) {
        size += 1 + 1;
      }
      if (RepeatingTrack != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextPlayerOptions other) {
      if (other == null) {
        return;
      }
      if (other.ShufflingContext != false) {
        ShufflingContext = other.ShufflingContext;
      }
      if (other.RepeatingContext != false) {
        RepeatingContext = other.RepeatingContext;
      }
      if (other.RepeatingTrack != false) {
        RepeatingTrack = other.RepeatingTrack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShufflingContext = input.ReadBool();
            break;
          }
          case 16: {
            RepeatingContext = input.ReadBool();
            break;
          }
          case 24: {
            RepeatingTrack = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ShufflingContext = input.ReadBool();
            break;
          }
          case 16: {
            RepeatingContext = input.ReadBool();
            break;
          }
          case 24: {
            RepeatingTrack = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Suppressions : pb::IMessage<Suppressions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Suppressions> _parser = new pb::MessageParser<Suppressions>(() => new Suppressions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Suppressions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Connectstate.PlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Suppressions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Suppressions(Suppressions other) : this() {
      providers_ = other.providers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Suppressions Clone() {
      return new Suppressions(this);
    }

    /// <summary>Field number for the "providers" field.</summary>
    public const int ProvidersFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_providers_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> providers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Providers {
      get { return providers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Suppressions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Suppressions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!providers_.Equals(other.providers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= providers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      providers_.WriteTo(output, _repeated_providers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      providers_.WriteTo(ref output, _repeated_providers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += providers_.CalculateSize(_repeated_providers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Suppressions other) {
      if (other == null) {
        return;
      }
      providers_.Add(other.providers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            providers_.AddEntriesFrom(input, _repeated_providers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            providers_.AddEntriesFrom(ref input, _repeated_providers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
